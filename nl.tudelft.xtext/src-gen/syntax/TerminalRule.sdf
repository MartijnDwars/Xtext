
module TerminalRule
imports Common ParserRule

exports
  context-free syntax
    "terminal" TerminalName ":" TerminalAlternatives ";" -> AbstractRule         {cons("TerminalRule")}
    "fragment" ID                                        -> TerminalName         {cons("Fragment")}
    ID Returns?                                          -> TerminalName         {cons("Returns")}
    {TerminalGroup "|"}+                                 -> TerminalAlternatives {cons("TerminalAlternatives")}
    TerminalToken+                                       -> TerminalGroup        {cons("TerminalGroup")}
    TerminalTokenElement Cardinality?                    -> TerminalToken        {cons("TerminalToken")}
    "(" TerminalAlternatives ")"                         -> TerminalTokenElement 
    STRING                                               -> TerminalTokenElement {cons("Keyword")}
    RuleCall                                             -> TerminalTokenElement 
    Keyword ".." Keyword                                 -> TerminalTokenElement {cons("CharacterRange")}
    WILDCARD                                             -> TerminalTokenElement {cons("Wildcard")}
    "!" TerminalTokenElement                             -> TerminalTokenElement {cons("NegatedToken")}
    "->" TerminalTokenElement                            -> TerminalTokenElement {cons("UntilToken")}
    Eof                                                  -> TerminalTokenElement {cons("TerminalTokenElement")}
    STRING                                               -> Keyword              {cons("Keyword")}
    "EOF"                                                -> Eof                  {cons("EOF")}

  context-free syntax
    CONTENTCOMPLETE -> AbstractRule         {cons("COMPLETION-AbstractRule")}
    CONTENTCOMPLETE -> TerminalName         {cons("COMPLETION-TerminalName")}
    CONTENTCOMPLETE -> TerminalTokenElement {cons("COMPLETION-TerminalTokenElement")}