module xtext-obtain-priorities

imports
	
	libstratego-gpp
	include/TemplateLang
	include/Xtext
	generate/common
	
rules
	obtain-priorities:
		ast -> <try(remove-return)> (ast, priorities)
  where
		chains     := <collect-all(gen-priorities(|ast)); flatten-list> ast;
		priorities := SDFSection(ContextFreePriorities(chains))

	
	//Removing rules of type Exp = Exp can more easily be done in SDF
	
	gen-priorities(|ast):
		ParserRule(name, Some(Returns(TypeRef(None(), return_type))), _, alternatives) -> chains
		where
			action := <last> <collect(find_actions)> alternatives;
			rulecalls := <collect-all(find_rulecall)> alternatives;
			matches := <collect-all(find_matching_priority(|name, return_type, rulecalls))> ast;
			chains := <map(generate-chains(|name, action))> matches
			
	generate-chains(|lSort, lCons):
		(hSort, hCons) -> Chain([ProdsRefGroup([SortConsRef(Sort(hSort), Constructor(hCons))]), ProdsRefGroup([SortConsRef(Sort(lSort), Constructor(lCons))])])
			
	find_matching_priority(|name, rtype, calls):
		ParserRule(n, Some(Returns(TypeRef(None(), rt))), _, alternatives) -> (n, actions)
		where
			<elem> (n, calls);
			actions := <last> <collect(find_actions)> alternatives
	
	find_actions:
		ActionAbstractToken(Action(TypeRef(_, name), _)) -> name
		
	find_rulecall:
		RuleCall(name) -> name
	
	
	//Functionality for cleaning priority rules
	
	cleanup_priorities:
		chains -> cleaned
		where
			cleaned := <try(cleanup_priorities)> <clean_LHS + clean_RHS> chains
			
	clean_LHS:
		[Chain([le, re])|tail] -> output
		where
			equal_chains := <collect-all(?Chain([le,_])); collect-all(match-right-assoc(|re))> tail;
			<not(is-empty)> equal_chains;
			not_equal := <diff> (tail, equal_chains);
			extracted_rhs := <flatten-list; nub> <map(extract-right-element)> equal_chains;
			new_rhs := <merge-elements> (re, extracted_rhs);
			new_chain := Chain([le, new_rhs]);
			output := [new_chain|<try(cleanup_priorities)> not_equal]
	
	clean_RHS:
		[Chain([le, re])|tail] -> output
		where
			equal_chains := <collect-all(?Chain([_,re])); collect-all(match-left-assoc(|le))> tail;
			<not(is-empty)> equal_chains;
			not_equal := <diff> (tail, equal_chains);
			extracted_lhs := <flatten-list; nub> <map(extract-left-element)> equal_chains;
			new_lhs := <merge-elements> (le, extracted_lhs);
			new_chain := Chain([new_lhs, re]);
			output := [new_chain|<try(cleanup_priorities)> not_equal]	
			
	match-right-assoc(|re):
		Chain([_,ProdsRefGroup(elements)]) -> <id>
		where
			<?ProdsRefGroup(_)> re
			
	match-right-assoc(|re):
		Chain([_,AssocRefGroup(as, elements)]) -> <id>
		where
			<?AssocRefGroup(as,_)> re	
	
	match-left-assoc(|le):
		Chain([ProdsRefGroup(elements),_]) -> <id>
		where
			<?ProdsRefGroup(_)> le
			
	match-left-assoc(|le):
		Chain([AssocRefGroup(as, elements),_]) -> <id>
		where
			<?AssocRefGroup(as,_)> le	
						
	extract-right-element:
		Chain([_,ProdsRefGroup(elements)]) -> elements
	
	extract-right-element:
		Chain([_,AssocRefGroup(as, elements)]) -> elements
	
	extract-left-element:
		Chain([ProdsRefGroup(elements),_]) -> elements
		
	extract-left-element:
		Chain([AssocRefGroup(as, elements),_]) -> elements
		
    merge-elements:
    	(ProdsRefGroup(original), nw) -> ProdsRefGroup(<conc> (original, nw))
    	
    merge-elements:
    	(AssocRefGroup(as, original), nw) -> AssocRefGroup(as, <conc> (original, nw))
	
	//Remove Returns		
	remove-return:
		ast -> output
		where
		<collect-one(?ParserRule(name@_, Some(Returns(TypeRef(None(), r_type@_))), _, _))> ast;
		output := <try(remove-return)> <bottomup(try(replace(|name, r_type)))> ast
	
	replace(|old, new):
		Keyword(old) -> <id>
		
	replace(|old, new):
		RuleCall(old) -> RuleCall(new)
		
	replace(|old, new):
		CrossReference(TypeRef(e,old), opt) -> CrossReference(TypeRef(e,old), opt)
		
	replace(|old, new):
		ParserRule(old, return, e1, e2) -> ParserRule(new, None(), e1, e2)
		
	replace(|old, new):
		Sort(old) -> Sort(new)
