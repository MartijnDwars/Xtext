module TerminalRule

language Xtext
start symbol AbstractRule

test correct sort name [[
	terminal FancyName:
		'a'
	;
]] run gen-sdf-debug to LexicalSyntax([
	SdfProduction(
        SortDef("FancyName")
      , _
      , _
	)
])

test terminal that accepts a single character [[
	terminal ID:
		'a'
	;
]] run gen-sdf-debug to LexicalSyntax([
	SdfProduction(
        SortDef("ID")
      , Rhs([CharClass(Simple(Present(Short("a"))))])
      , NoAttrs()
	)
])

test terminal that accepts a range [[
	terminal ID:
		'a'..'z'
	;
]] run gen-sdf-debug to LexicalSyntax([
	SdfProduction(
		SortDef("ID")
      , Rhs([
        	CharClass(Simple(Present(Range(Short("a"), Short("z")))))
        ])
      , NoAttrs()
	)
])

test terminal with two alternatives [[
	terminal ID:
		'a' | 'b'
	;
]] run gen-sdf-debug to LexicalSyntax([
	SdfProduction(
        SortDef("ID")
      , Rhs([
        	Alt(
              CharClass(Simple(Present(Short("a"))))
            , CharClass(Simple(Present(Short("b"))))
            )
        ])
      , NoAttrs()
	)
])

// To make this work, we need to post-process the results. Turn CharClass(Simple(Present(Alt(...)))) -> Alt(...)
test terminal with two alternatives and optional cardinality [[
	terminal ID:
		('a' | 'b')?
	;
]] run gen-sdf-debug to LexicalSyntax([
  SdfProduction(
    SortDef("ID")
  , Rhs(
      [ Opt(
          Alt(
            CharClass(Simple(Present(Short("a"))))
          , CharClass(Simple(Present(Short("b"))))
          )
        )
      ]
    )
  , NoAttrs()
  )
])

test terminal with kleene star [[
	terminal ID : 
		'a'..'z'*
	;
]] run gen-sdf-debug to LexicalSyntax([
	SdfProduction(
		SortDef("ID")
      , Rhs([
        	IterStar(CharClass(Simple(Present(Range(Short("a"), Short("z"))))))
        ])
      , NoAttrs()
	)
])

test terminal with two groups [[
	terminal ID : 
		'a'..'z' '0'..'9'
	;
]] run gen-sdf-debug to LexicalSyntax([
	SdfProduction(
		SortDef("ID")
      , Rhs([Sequence(
          CharClass(Simple(Present(Range(Short("a"), Short("z")))))
        , [CharClass(Simple(Present(Range(Short("0"), Short("9")))))]
        )])
      , NoAttrs()
	)
])

test complex terminal [[
	terminal ID : 
	  ('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	;
]] run gen-sdf-debug to LexicalSyntax([
	SdfProduction(
	    SortDef("ID")
	  , Rhs(
	      [ Opt(CharClass(Simple(Present(Short("\\^")))))
	      , CharClass(
	          Simple(
	            Present(
	              Conc(
	                Range(Short("a"), Short("z"))
	              , Conc(Range(Short("A"), Short("Z")), Short("\\_"))
	              )
	            )
	          )
	        )
	      , IterStar(
	          CharClass(
	            Simple(
	              Present(
	                Conc(
	                  Range(Short("a"), Short("z"))
	                , Conc(
	                    Range(Short("A"), Short("Z"))
	                  , Conc(Short("\\_"), Range(Short("0"), Short("9")))
	                  )
	                )
	              )
	            )
	          )
	        )
	      ]
	    )
	  , NoAttrs()
	)
])

test wildcard [[
	terminal FOO : 'f' . 'o';
]] run gen-sdf-debug to LexicalSyntax(
  [ SdfProduction(
      SortDef("FOO")
    , Rhs(
        [ Parenthetical(
            Sequence(
              Lit("'f'")
            , [CharClass(Comp(Simple(Absent()))), Lit("'o'")]
            )
          )
        ]
      )
    , NoAttrs()
    )
  ]
)