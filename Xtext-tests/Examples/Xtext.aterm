Grammar(
  GrammarID(["org", "eclipse", "xtext", "Xtext"])
, Some(
    Mixin(
      [GrammarID(["org", "eclipse", "xtext", "common", "Terminals"])]
    )
  )
, None()
, [ReferencedMetamodel("\"http://www.eclipse.org/2008/Xtext\"", None()), ReferencedMetamodel("\"http://www.eclipse.org/emf/2002/Ecore\"", Some(Alias("ecore")))]
, [ ParserRule(
      "Grammar"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(Keyword("'grammar'"), None())
                , AssignmentAbstractToken(None(), "name", Assignment(), RuleCall("GrammarID"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AbstractTerminalAbstractToken(Keyword("'with'"), None())
                              , AssignmentAbstractToken(
                                  None()
                                , "usedGrammars"
                                , AddAssignment()
                                , CrossReference(TypeRef(None(), "Grammar"), Some(CrossReferenceableTerminal(RuleCall("GrammarID"))))
                                , None()
                                )
                              , AbstractTerminalAbstractToken(
                                  Alternatives(
                                    [ UnorderedGroup(
                                        [ Group(
                                            [ AbstractTerminalAbstractToken(Keyword("','"), None())
                                            , AssignmentAbstractToken(
                                                None()
                                              , "usedGrammars"
                                              , AddAssignment()
                                              , CrossReference(TypeRef(None(), "Grammar"), Some(CrossReferenceableTerminal(RuleCall("GrammarID"))))
                                              , None()
                                              )
                                            ]
                                          )
                                        ]
                                      )
                                    ]
                                  )
                                , Some(Any())
                                )
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AssignmentAbstractToken(None(), "definesHiddenTokens", BooleanAssignment(), Keyword("'hidden'"), None())
                              , AbstractTerminalAbstractToken(Keyword("'('"), None())
                              , AbstractTerminalAbstractToken(
                                  Alternatives(
                                    [ UnorderedGroup(
                                        [ Group(
                                            [ AssignmentAbstractToken(
                                                None()
                                              , "hiddenTokens"
                                              , AddAssignment()
                                              , CrossReference(TypeRef(None(), "AbstractRule"), None())
                                              , None()
                                              )
                                            , AbstractTerminalAbstractToken(
                                                Alternatives(
                                                  [ UnorderedGroup(
                                                      [ Group(
                                                          [ AbstractTerminalAbstractToken(Keyword("','"), None())
                                                          , AssignmentAbstractToken(
                                                              None()
                                                            , "hiddenTokens"
                                                            , AddAssignment()
                                                            , CrossReference(TypeRef(None(), "AbstractRule"), None())
                                                            , None()
                                                            )
                                                          ]
                                                        )
                                                      ]
                                                    )
                                                  ]
                                                )
                                              , Some(Any())
                                              )
                                            ]
                                          )
                                        ]
                                      )
                                    ]
                                  )
                                , Some(Optional())
                                )
                              , AbstractTerminalAbstractToken(Keyword("')'"), None())
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                , AssignmentAbstractToken(None(), "metamodelDeclarations", AddAssignment(), RuleCall("AbstractMetamodelDeclaration"), Some(Any()))
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [Group(
                             [AssignmentAbstractToken(None(), "rules", AddAssignment(), RuleCall("AbstractRule"), None())]
                           )]
                        )
                      ]
                    )
                  , Some(Multiple())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "GrammarID"
    , Some(Returns(MetaModelDeclaration(Classifier("ecore::EString"))))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(RuleCall("ID"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [AbstractTerminalAbstractToken(Keyword("'.'"), None()), AbstractTerminalAbstractToken(RuleCall("ID"), None())]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Any())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "AbstractRule"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("ParserRule"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("TerminalRule"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("EnumRule"), None())])])
        ]
      )
    )
  , ParserRule(
      "AbstractMetamodelDeclaration"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("GeneratedMetamodel"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("ReferencedMetamodel"), None())])])
        ]
      )
    )
  , ParserRule(
      "GeneratedMetamodel"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(Keyword("'generate'"), None())
                , AssignmentAbstractToken(None(), "name", Assignment(), RuleCall("ID"), None())
                , AssignmentAbstractToken(
                    None()
                  , "ePackage"
                  , Assignment()
                  , CrossReference(MetaModelDeclaration(Classifier("ecore::EPackage")), Some(CrossReferenceableTerminal(RuleCall("STRING"))))
                  , None()
                  )
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AbstractTerminalAbstractToken(Keyword("'as'"), None())
                              , AssignmentAbstractToken(None(), "alias", Assignment(), RuleCall("ID"), None())
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "ReferencedMetamodel"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(Keyword("'import'"), None())
                , AssignmentAbstractToken(
                    None()
                  , "ePackage"
                  , Assignment()
                  , CrossReference(MetaModelDeclaration(Classifier("ecore::EPackage")), Some(CrossReferenceableTerminal(RuleCall("STRING"))))
                  , None()
                  )
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AbstractTerminalAbstractToken(Keyword("'as'"), None())
                              , AssignmentAbstractToken(None(), "alias", Assignment(), RuleCall("ID"), None())
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "ParserRule"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AssignmentAbstractToken(None(), "name", Assignment(), RuleCall("ID"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AbstractTerminalAbstractToken(Keyword("'returns'"), None())
                              , AssignmentAbstractToken(None(), "type", Assignment(), RuleCall("TypeRef"), None())
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AssignmentAbstractToken(None(), "definesHiddenTokens", BooleanAssignment(), Keyword("'hidden'"), None())
                              , AbstractTerminalAbstractToken(Keyword("'('"), None())
                              , AbstractTerminalAbstractToken(
                                  Alternatives(
                                    [ UnorderedGroup(
                                        [ Group(
                                            [ AssignmentAbstractToken(
                                                None()
                                              , "hiddenTokens"
                                              , AddAssignment()
                                              , CrossReference(TypeRef(None(), "AbstractRule"), None())
                                              , None()
                                              )
                                            , AbstractTerminalAbstractToken(
                                                Alternatives(
                                                  [ UnorderedGroup(
                                                      [ Group(
                                                          [ AbstractTerminalAbstractToken(Keyword("','"), None())
                                                          , AssignmentAbstractToken(
                                                              None()
                                                            , "hiddenTokens"
                                                            , AddAssignment()
                                                            , CrossReference(TypeRef(None(), "AbstractRule"), None())
                                                            , None()
                                                            )
                                                          ]
                                                        )
                                                      ]
                                                    )
                                                  ]
                                                )
                                              , Some(Any())
                                              )
                                            ]
                                          )
                                        ]
                                      )
                                    ]
                                  )
                                , Some(Optional())
                                )
                              , AbstractTerminalAbstractToken(Keyword("')'"), None())
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                , AbstractTerminalAbstractToken(Keyword("':'"), None())
                , AssignmentAbstractToken(None(), "alternatives", Assignment(), RuleCall("Alternatives"), None())
                , AbstractTerminalAbstractToken(Keyword("';'"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "TypeRef"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AssignmentAbstractToken(
                                  None()
                                , "metamodel"
                                , Assignment()
                                , CrossReference(TypeRef(None(), "AbstractMetamodelDeclaration"), None())
                                , None()
                                )
                              , AbstractTerminalAbstractToken(Keyword("'::'"), None())
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                , AssignmentAbstractToken(
                    None()
                  , "classifier"
                  , Assignment()
                  , CrossReference(MetaModelDeclaration(Classifier("ecore::EClassifier")), None())
                  , None()
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "Alternatives"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(RuleCall("UnorderedGroup"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ ActionAbstractToken(
                                  Action(TypeRef(None(), "Alternatives"), Some(ActionCurrent("elements", AddAssignment())))
                                )
                              , AbstractTerminalAbstractToken(
                                  Alternatives(
                                    [ UnorderedGroup(
                                        [ Group(
                                            [ AbstractTerminalAbstractToken(Keyword("'|'"), None())
                                            , AssignmentAbstractToken(None(), "elements", AddAssignment(), RuleCall("UnorderedGroup"), None())
                                            ]
                                          )
                                        ]
                                      )
                                    ]
                                  )
                                , Some(Multiple())
                                )
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "UnorderedGroup"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(RuleCall("Group"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ ActionAbstractToken(
                                  Action(TypeRef(None(), "UnorderedGroup"), Some(ActionCurrent("elements", AddAssignment())))
                                )
                              , AbstractTerminalAbstractToken(
                                  Alternatives(
                                    [ UnorderedGroup(
                                        [ Group(
                                            [ AbstractTerminalAbstractToken(Keyword("'&'"), None())
                                            , AssignmentAbstractToken(None(), "elements", AddAssignment(), RuleCall("Group"), None())
                                            ]
                                          )
                                        ]
                                      )
                                    ]
                                  )
                                , Some(Multiple())
                                )
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "Group"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(RuleCall("AbstractToken"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ ActionAbstractToken(
                                  Action(TypeRef(None(), "Group"), Some(ActionCurrent("elements", AddAssignment())))
                                )
                              , AbstractTerminalAbstractToken(
                                  Alternatives(
                                    [ UnorderedGroup(
                                        [Group(
                                           [AssignmentAbstractToken(None(), "elements", AddAssignment(), RuleCall("AbstractToken"), None())]
                                         )]
                                      )
                                    ]
                                  )
                                , Some(Multiple())
                                )
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "AbstractToken"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("AbstractTokenWithCardinality"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("Action"), None())])])
        ]
      )
    )
  , ParserRule(
      "AbstractTokenWithCardinality"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("Assignment"), None())])])
                      , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("AbstractTerminal"), None())])])
                      ]
                    )
                  , None()
                  )
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AssignmentAbstractToken(
                                  None()
                                , "cardinality"
                                , Assignment()
                                , AssignableAlternatives([Keyword("'?'"), Keyword("'*'"), Keyword("'+'")])
                                , None()
                                )
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "Action"
    , Some(Returns(TypeRef(None(), "Action")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(Keyword("'{'"), None())
                , AssignmentAbstractToken(None(), "type", Assignment(), RuleCall("TypeRef"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AbstractTerminalAbstractToken(Keyword("'.'"), None())
                              , AssignmentAbstractToken(None(), "feature", Assignment(), RuleCall("ID"), None())
                              , AssignmentAbstractToken(
                                  None()
                                , "operator"
                                , Assignment()
                                , AssignableAlternatives([Keyword("'='"), Keyword("'+='")])
                                , None()
                                )
                              , AbstractTerminalAbstractToken(Keyword("'current'"), None())
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                , AbstractTerminalAbstractToken(Keyword("'}'"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "AbstractTerminal"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("Keyword"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("RuleCall"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("ParenthesizedElement"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("PredicatedKeyword"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("PredicatedRuleCall"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("PredicatedGroup"), None())])])
        ]
      )
    )
  , ParserRule(
      "Keyword"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [Group(
               [AssignmentAbstractToken(None(), "value", Assignment(), RuleCall("STRING"), None())]
             )]
          )
        ]
      )
    )
  , ParserRule(
      "RuleCall"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AssignmentAbstractToken(
                    None()
                  , "rule"
                  , Assignment()
                  , CrossReference(TypeRef(None(), "AbstractRule"), None())
                  , None()
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "PredicatedKeyword"
    , Some(Returns(TypeRef(None(), "Keyword")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [Group(
                             [AssignmentAbstractToken(None(), "predicated", BooleanAssignment(), Keyword("'=>'"), None())]
                           )]
                        )
                      , UnorderedGroup(
                          [Group(
                             [AssignmentAbstractToken(None(), "firstSetPredicated", BooleanAssignment(), Keyword("'->'"), None())]
                           )]
                        )
                      ]
                    )
                  , None()
                  )
                , AssignmentAbstractToken(None(), "value", Assignment(), RuleCall("STRING"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "PredicatedRuleCall"
    , Some(Returns(TypeRef(None(), "RuleCall")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [Group(
                             [AssignmentAbstractToken(None(), "predicated", BooleanAssignment(), Keyword("'=>'"), None())]
                           )]
                        )
                      , UnorderedGroup(
                          [Group(
                             [AssignmentAbstractToken(None(), "firstSetPredicated", BooleanAssignment(), Keyword("'->'"), None())]
                           )]
                        )
                      ]
                    )
                  , None()
                  )
                , AssignmentAbstractToken(
                    None()
                  , "rule"
                  , Assignment()
                  , CrossReference(TypeRef(None(), "AbstractRule"), None())
                  , None()
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "Assignment"
    , Some(Returns(TypeRef(None(), "Assignment")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [Group(
                             [AssignmentAbstractToken(None(), "predicated", BooleanAssignment(), Keyword("'=>'"), None())]
                           )]
                        )
                      , UnorderedGroup(
                          [Group(
                             [AssignmentAbstractToken(None(), "firstSetPredicated", BooleanAssignment(), Keyword("'->'"), None())]
                           )]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                , AssignmentAbstractToken(None(), "feature", Assignment(), RuleCall("ID"), None())
                , AssignmentAbstractToken(
                    None()
                  , "operator"
                  , Assignment()
                  , AssignableAlternatives([Keyword("'+='"), Keyword("'='"), Keyword("'?='")])
                  , None()
                  )
                , AssignmentAbstractToken(None(), "^terminal", Assignment(), RuleCall("AssignableTerminal"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "AssignableTerminal"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("Keyword"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("RuleCall"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("ParenthesizedAssignableElement"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("CrossReference"), None())])])
        ]
      )
    )
  , ParserRule(
      "ParenthesizedAssignableElement"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(Keyword("'('"), None())
                , AbstractTerminalAbstractToken(RuleCall("AssignableAlternatives"), None())
                , AbstractTerminalAbstractToken(Keyword("')'"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "AssignableAlternatives"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(RuleCall("AssignableTerminal"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ ActionAbstractToken(
                                  Action(TypeRef(None(), "Alternatives"), Some(ActionCurrent("elements", AddAssignment())))
                                )
                              , AbstractTerminalAbstractToken(
                                  Alternatives(
                                    [ UnorderedGroup(
                                        [ Group(
                                            [ AbstractTerminalAbstractToken(Keyword("'|'"), None())
                                            , AssignmentAbstractToken(None(), "elements", AddAssignment(), RuleCall("AssignableTerminal"), None())
                                            ]
                                          )
                                        ]
                                      )
                                    ]
                                  )
                                , Some(Multiple())
                                )
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "CrossReference"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(Keyword("'['"), None())
                , AssignmentAbstractToken(None(), "type", Assignment(), RuleCall("TypeRef"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AbstractTerminalAbstractToken(Keyword("'|'"), None())
                              , AssignmentAbstractToken(None(), "^terminal", Assignment(), RuleCall("CrossReferenceableTerminal"), None())
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                , AbstractTerminalAbstractToken(Keyword("']'"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "CrossReferenceableTerminal"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("Keyword"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("RuleCall"), None())])])
        ]
      )
    )
  , ParserRule(
      "ParenthesizedElement"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(Keyword("'('"), None())
                , AbstractTerminalAbstractToken(RuleCall("Alternatives"), None())
                , AbstractTerminalAbstractToken(Keyword("')'"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "PredicatedGroup"
    , Some(Returns(TypeRef(None(), "Group")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [Group(
                             [AssignmentAbstractToken(None(), "predicated", BooleanAssignment(), Keyword("'=>'"), None())]
                           )]
                        )
                      , UnorderedGroup(
                          [Group(
                             [AssignmentAbstractToken(None(), "firstSetPredicated", BooleanAssignment(), Keyword("'->'"), None())]
                           )]
                        )
                      ]
                    )
                  , None()
                  )
                , AbstractTerminalAbstractToken(Keyword("'('"), None())
                , AssignmentAbstractToken(None(), "elements", AddAssignment(), RuleCall("Alternatives"), None())
                , AbstractTerminalAbstractToken(Keyword("')'"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "TerminalRule"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(Keyword("'terminal'"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AssignmentAbstractToken(None(), "^fragment", BooleanAssignment(), Keyword("'fragment'"), None())
                              , AssignmentAbstractToken(None(), "name", Assignment(), RuleCall("ID"), None())
                              ]
                            )
                          ]
                        )
                      , UnorderedGroup(
                          [ Group(
                              [ AssignmentAbstractToken(None(), "name", Assignment(), RuleCall("ID"), None())
                              , AbstractTerminalAbstractToken(
                                  Alternatives(
                                    [ UnorderedGroup(
                                        [ Group(
                                            [ AbstractTerminalAbstractToken(Keyword("'returns'"), None())
                                            , AssignmentAbstractToken(None(), "type", Assignment(), RuleCall("TypeRef"), None())
                                            ]
                                          )
                                        ]
                                      )
                                    ]
                                  )
                                , Some(Optional())
                                )
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , None()
                  )
                , AbstractTerminalAbstractToken(Keyword("':'"), None())
                , AssignmentAbstractToken(None(), "alternatives", Assignment(), RuleCall("TerminalAlternatives"), None())
                , AbstractTerminalAbstractToken(Keyword("';'"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "TerminalAlternatives"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(RuleCall("TerminalGroup"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ ActionAbstractToken(
                                  Action(TypeRef(None(), "Alternatives"), Some(ActionCurrent("elements", AddAssignment())))
                                )
                              , AbstractTerminalAbstractToken(
                                  Alternatives(
                                    [ UnorderedGroup(
                                        [ Group(
                                            [ AbstractTerminalAbstractToken(Keyword("'|'"), None())
                                            , AssignmentAbstractToken(None(), "elements", AddAssignment(), RuleCall("TerminalGroup"), None())
                                            ]
                                          )
                                        ]
                                      )
                                    ]
                                  )
                                , Some(Multiple())
                                )
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "TerminalGroup"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(RuleCall("TerminalToken"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ ActionAbstractToken(
                                  Action(TypeRef(None(), "Group"), Some(ActionCurrent("elements", AddAssignment())))
                                )
                              , AbstractTerminalAbstractToken(
                                  Alternatives(
                                    [ UnorderedGroup(
                                        [Group(
                                           [AssignmentAbstractToken(None(), "elements", AddAssignment(), RuleCall("TerminalToken"), None())]
                                         )]
                                      )
                                    ]
                                  )
                                , Some(Multiple())
                                )
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "TerminalToken"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(RuleCall("TerminalTokenElement"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AssignmentAbstractToken(
                                  None()
                                , "cardinality"
                                , Assignment()
                                , AssignableAlternatives([Keyword("'?'"), Keyword("'*'"), Keyword("'+'")])
                                , None()
                                )
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "TerminalTokenElement"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("CharacterRange"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("RuleCall"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("ParenthesizedTerminalElement"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("AbstractNegatedToken"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("Wildcard"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("^EOF"), None())])])
        ]
      )
    )
  , ParserRule(
      "ParenthesizedTerminalElement"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(Keyword("'('"), None())
                , AbstractTerminalAbstractToken(RuleCall("TerminalAlternatives"), None())
                , AbstractTerminalAbstractToken(Keyword("')'"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "AbstractNegatedToken"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("NegatedToken"), None())])])
        , UnorderedGroup([Group([AbstractTerminalAbstractToken(RuleCall("UntilToken"), None())])])
        ]
      )
    )
  , ParserRule(
      "NegatedToken"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(Keyword("'!'"), None())
                , AssignmentAbstractToken(None(), "^terminal", Assignment(), RuleCall("TerminalTokenElement"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "UntilToken"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(Keyword("'->'"), None())
                , AssignmentAbstractToken(None(), "^terminal", Assignment(), RuleCall("TerminalTokenElement"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "Wildcard"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ ActionAbstractToken(Action(TypeRef(None(), "Wildcard"), None()))
                , AbstractTerminalAbstractToken(Keyword("'.'"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "^EOF"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ ActionAbstractToken(Action(TypeRef(None(), "^EOF"), None()))
                , AbstractTerminalAbstractToken(Keyword("'EOF'"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "CharacterRange"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(RuleCall("Keyword"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ ActionAbstractToken(
                                  Action(TypeRef(None(), "CharacterRange"), Some(ActionCurrent("left", Assignment())))
                                )
                              , AbstractTerminalAbstractToken(Keyword("'..'"), None())
                              , AssignmentAbstractToken(None(), "right", Assignment(), RuleCall("Keyword"), None())
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "EnumRule"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(Keyword("'enum'"), None())
                , AssignmentAbstractToken(None(), "name", Assignment(), RuleCall("ID"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AbstractTerminalAbstractToken(Keyword("'returns'"), None())
                              , AssignmentAbstractToken(None(), "type", Assignment(), RuleCall("TypeRef"), None())
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                , AbstractTerminalAbstractToken(Keyword("':'"), None())
                , AssignmentAbstractToken(None(), "alternatives", Assignment(), RuleCall("EnumLiterals"), None())
                , AbstractTerminalAbstractToken(Keyword("';'"), None())
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "EnumLiterals"
    , Some(Returns(TypeRef(None(), "AbstractElement")))
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AbstractTerminalAbstractToken(RuleCall("EnumLiteralDeclaration"), None())
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ ActionAbstractToken(
                                  Action(TypeRef(None(), "Alternatives"), Some(ActionCurrent("elements", AddAssignment())))
                                )
                              , AbstractTerminalAbstractToken(
                                  Alternatives(
                                    [ UnorderedGroup(
                                        [ Group(
                                            [ AbstractTerminalAbstractToken(Keyword("'|'"), None())
                                            , AssignmentAbstractToken(None(), "elements", AddAssignment(), RuleCall("EnumLiteralDeclaration"), None())
                                            ]
                                          )
                                        ]
                                      )
                                    ]
                                  )
                                , Some(Multiple())
                                )
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  , ParserRule(
      "EnumLiteralDeclaration"
    , None()
    , None()
    , Alternatives(
        [ UnorderedGroup(
            [ Group(
                [ AssignmentAbstractToken(
                    None()
                  , "enumLiteral"
                  , Assignment()
                  , CrossReference(MetaModelDeclaration(Classifier("ecore::EEnumLiteral")), None())
                  , None()
                  )
                , AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AbstractTerminalAbstractToken(Keyword("'='"), None())
                              , AssignmentAbstractToken(None(), "literal", Assignment(), RuleCall("Keyword"), None())
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  , Some(Optional())
                  )
                ]
              )
            ]
          )
        ]
      )
    )
  ]
)