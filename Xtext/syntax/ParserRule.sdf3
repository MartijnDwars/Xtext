module ParserRule

imports
  
  Common

context-free start-symbols
  
  // These sorts are only added to allow testing:
  AbstractRule
  
context-free syntax

  // AbstractToken.List = <(<AbstractToken>(<STRING> <AbstractToken>)<Cardinality>)<Cardinality>>
  
  Operator.Assignment = "="
  Operator.AddAssignment = "+="
  Operator.BooleanAssignment = "?="
  
  TypeRef.TypeRef = AbstractMetaModelReference? ID
  TypeRef.MetaModelDeclaration = < ecore :: <Classifier> >
  
  AbstractMetaModelReference.AbstractMetaModelReference = <<STRING> ::>
  
  Classifier.Classifier = <EClassifier>
  	
  AbstractRule.ParserRule = <<ID> <Returns?> <HiddenToken?>: <Alternatives> ;>
  
  Returns.Returns = <returns <TypeRef>>
  
  HiddenToken.HiddenToken = <hidden ( <{RuleCall ","}+> )>  
  
  Alternatives.Alternatives = <<{UnorderedGroup "|"}+>>
  
  UnorderedGroup.UnorderedGroup = <<{Group "&"}+>>
  
  Group.Group = AbstractToken+
  
  AbstractToken.AssignmentAbstractToken = Predicated? ID Operator AssignableTerminal Cardinality?
  AbstractToken.AbstractTerminalAbstractToken = AbstractTerminal Cardinality?
  AbstractToken.ActionAbstractToken = Action
  
  Predicated.Predicated = "=>"
  Predicated.FirstSetPredicated = "->"
  
  AssignableTerminal.Keyword = STRING
  AssignableTerminal = RuleCall
  AssignableTerminal = <( <AssignableAlternatives> )>
  AssignableTerminal.CrossReference = <[ <TypeRef> <CrossReferenceableTerminal?> ]> 
  
  CrossReferenceableTerminal.CrossReferenceableTerminal = <| <RuleCall>>
  
  RuleCall.RuleCall = ID
  
  AssignableAlternatives.AssignableAlternatives = <<{AssignableTerminal "|"}+>>
  
  Action.Action = <{ <TypeRef> <ActionCurrent?> }>
  ActionCurrent.ActionCurrent = <. <ID> <Operator> current>
  
  AbstractTerminal.Keyword = STRING
  AbstractTerminal = <( <Alternatives> )>
  AbstractTerminal = RuleCall
  AbstractTerminal.PredicatedKeyword = Predicated STRING
  AbstractTerminal.PredicatedRuleCall = Predicated RuleCall
  AbstractTerminal.PredicatedGroup = <<Predicated> ( <Alternatives> )>
