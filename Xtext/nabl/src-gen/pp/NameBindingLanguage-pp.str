module nabl/src-gen/pp/NameBindingLanguage-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  nabl/src-gen/signatures/NameBindingLanguage-sig


imports
  nabl/src-gen/signatures/common/Layout-sig
  nabl/src-gen/signatures/common/Identifiers-sig
  nabl/src-gen/signatures/terms/Signatures-sig
  nabl/src-gen/signatures/terms/Terms-sig
  nabl/src-gen/signatures/formulas/Formulas-sig
  nabl/src-gen/signatures/formulas/Propositions-sig
  nabl/src-gen/signatures/core/Modules-sig
  nabl/src-gen/signatures/core/Namespaces-sig
  nabl/src-gen/signatures/core/Properties-sig
  nabl/src-gen/signatures/terms/Vars-sig


imports
  nabl/src-gen/pp/common/Layout-pp
  nabl/src-gen/pp/common/Identifiers-pp
  nabl/src-gen/pp/terms/Signatures-pp
  nabl/src-gen/pp/terms/Terms-pp
  nabl/src-gen/pp/formulas/Formulas-pp
  nabl/src-gen/pp/formulas/Propositions-pp
  nabl/src-gen/pp/core/Modules-pp
  nabl/src-gen/pp/core/Namespaces-pp
  nabl/src-gen/pp/core/Properties-pp
  nabl/src-gen/pp/terms/Vars-pp


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-Start


strategies
  prettyprint-example =
    prettyprint-Start

  prettyprint-Start :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Start)
    where t1__' := <pp-one-Z(prettyprint-nabl-Module)> t1__

  is-Start =
    fail

  prettyprint-Start :
    amb([h|hs]) -> <prettyprint-Start> h


strategies
  prettyprint-example =
    prettyprint-RestrictedNamespaceRef

  prettyprint-example =
    prettyprint-Restriction

  prettyprint-RestrictedNamespaceRef :
    Restricted(t1__, t2__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [t1__', S(" "), t2__']
                                )
                              ]
    with t1__' := <pp-H-list(prettyprint-Restriction)> t1__
    with t2__' := <pp-one-Z(prettyprint-NamespaceRef)> t2__

  is-RestrictedNamespaceRef =
    ?Restricted(_, _)

  prettyprint-Restriction :
    Imported() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("imported")]
                    )
                  ]

  is-Restriction =
    ?Imported()

  is-RestrictedNamespaceRef =
    fail

  is-Restriction =
    fail

  prettyprint-RestrictedNamespaceRef :
    amb([h|hs]) -> <prettyprint-RestrictedNamespaceRef> h

  prettyprint-Restriction :
    amb([h|hs]) -> <prettyprint-Restriction> h


strategies
  prettyprint-example =
    prettyprint-PropertyDef

  prettyprint-example =
    prettyprint-QualityRef

  prettyprint-example =
    prettyprint-PropertyTerm

  prettyprint-example =
    prettyprint-PropertyPattern

  prettyprint-example =
    prettyprint-PropFilter

  prettyprint-PropertyDef :
    QualityDef(t1__, t2__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [t1__', S(" of "), t2__']
                                )
                              ]
    with t1__' := <pp-one-Z(prettyprint-PropertyID)> t1__
    with t2__' := <pp-H-list(prettyprint-NamespaceRef|", ")> t2__

  is-PropertyDef =
    ?QualityDef(_, _)

  prettyprint-QualityRef :
    QualityRef(t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t1__']
                          )
                        ]
    with t1__' := <pp-one-Z(prettyprint-PropertyID)> t1__

  is-QualityRef =
    ?QualityRef(_)

  prettyprint-PropertyTerm :
    PropertyTerm(t1__, t2__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ S("of ")
                                    , t1__'
                                    , S(" ")
                                    , t2__'
                                    ]
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-PropertyRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-PropertyTerm =
    ?PropertyTerm(_, _)

  prettyprint-PropertyTerm :
    QualityTerm(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("of quality "), t1__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-QualityRef)> t1__

  is-PropertyTerm =
    ?QualityTerm(_)

  prettyprint-PropertyPattern :
    PropertyPattern(t1__, t2__, t3__) -> [ H(
                                             [SOpt(HS(), "0")]
                                           , [ S("of ")
                                             , t1__'
                                             , S(" ")
                                             , t2__'
                                             , S(" ")
                                             , t3__'
                                             ]
                                           )
                                         ]
    with t1__' := <pp-one-Z(prettyprint-PropFilter)> t1__
    with t2__' := <pp-one-Z(prettyprint-PropertyRef)> t2__
    with t3__' := <pp-one-Z(prettyprint-Term)> t3__

  is-PropertyPattern =
    ?PropertyPattern(_, _, _)

  prettyprint-PropertyPattern :
    QualityPattern(t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("of quality "), t1__']
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-QualityRef)> t1__

  is-PropertyPattern =
    ?QualityPattern(_)

  prettyprint-PropFilter :
    Equal() -> [ H(
                   []
                 , [S("")]
                 )
               ]

  is-PropFilter =
    ?Equal()

  prettyprint-PropFilter :
    Conformant() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("conformant")]
                      )
                    ]

  is-PropFilter =
    ?Conformant()

  is-PropertyDef =
    fail

  is-QualityRef =
    fail

  is-PropertyTerm =
    fail

  is-PropertyPattern =
    fail

  is-PropFilter =
    fail

  prettyprint-PropertyDef :
    amb([h|hs]) -> <prettyprint-PropertyDef> h

  prettyprint-QualityRef :
    amb([h|hs]) -> <prettyprint-QualityRef> h

  prettyprint-PropertyTerm :
    amb([h|hs]) -> <prettyprint-PropertyTerm> h

  prettyprint-PropertyPattern :
    amb([h|hs]) -> <prettyprint-PropertyPattern> h

  prettyprint-PropFilter :
    amb([h|hs]) -> <prettyprint-PropFilter> h


strategies
  prettyprint-SectionKeyword =
    ![S(<is-string>)]

  prettyprint-example =
    prettyprint-SectionKeyword

  prettyprint-SectionKeyword :
    amb([h|hs]) -> <prettyprint-SectionKeyword> h


strategies
  prettyprint-example =
    prettyprint-nabl-ModuleSection

  prettyprint-example =
    prettyprint-BindingRule

  prettyprint-nabl-ModuleSection :
    Bindings(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("binding rules")]
                        )
                      , t1__'
                      ]
    with t1__' := <pp-indent(|"2")> [<pp-H-list(prettyprint-BindingRule)> t1__]

  is-ModuleSection =
    ?Bindings(_)

  prettyprint-BindingRule :
    BindingRule(t1__, t2__, t3__) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [ t1__'
                                         , S(" ")
                                         , t2__'
                                         , S(" : ")
                                         , t3__'
                                         ]
                                       )
                                     ]
    with t1__' := <pp-one-Z(prettyprint-Pattern)> t1__
    with t2__' := <pp-one-Z(prettyprint-Constraints)> t2__
    with t3__' := <pp-H-list(prettyprint-BindingClause)> t3__

  is-BindingRule =
    ?BindingRule(_, _, _)

  is-ModuleSection =
    fail

  is-BindingRule =
    fail

  prettyprint-nabl-ModuleSection :
    amb([h|hs]) -> <prettyprint-nabl-ModuleSection> h

  prettyprint-BindingRule :
    amb([h|hs]) -> <prettyprint-BindingRule> h


strategies
  prettyprint-example =
    prettyprint-DefKind

  prettyprint-example =
    prettyprint-Unique

  prettyprint-example =
    prettyprint-RefClausePart

  prettyprint-example =
    prettyprint-ImportClausePart

  prettyprint-example =
    prettyprint-Alias

  prettyprint-example =
    prettyprint-BindingClause

  prettyprint-example =
    prettyprint-Disambiguator

  prettyprint-BindingClause :
    DefClause(
      t1__
    , t2__
    , t3__
    , t4__
    , t5__
    , t6__
    , t7__
    ) -> [ H(
             [SOpt(HS(), "0")]
           , [ t1__'
             , S(" defines ")
             , t2__'
             , S(" ")
             , t3__'
             , S(" ")
             , t4__'
             , S(" ")
             , t5__'
             , S(" ")
             , t6__'
             , S(" ")
             , t7__'
             ]
           )
         ]
    with t1__' := <pp-one-Z(prettyprint-DefKind)> t1__
    with t2__' := <pp-one-Z(prettyprint-Unique)> t2__
    with t3__' := <pp-one-Z(prettyprint-NamespaceRef)> t3__
    with t4__' := <pp-one-Z(prettyprint-Term)> t4__
    with t5__' := <pp-H-list(prettyprint-PropertyTerm)> t5__
    with t6__' := <pp-one-Z(prettyprint-InDefScopes)> t6__
    with t7__' := <pp-one-Z(prettyprint-Constraints)> t7__

  is-BindingClause =
    ?DefClause(_, _, _, _, _, _, _)

  prettyprint-DefKind :
    Explicit() -> [ H(
                      []
                    , [S("")]
                    )
                  ]

  is-DefKind =
    ?Explicit()

  prettyprint-DefKind :
    Implicit() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("implicitly")]
                    )
                  ]

  is-DefKind =
    ?Implicit()

  prettyprint-Unique :
    Unique() -> [ H(
                    []
                  , [S("")]
                  )
                ]

  is-Unique =
    ?Unique()

  prettyprint-Unique :
    Unique() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("unique")]
                  )
                ]

  is-Unique =
    ?Unique()

  prettyprint-Unique :
    NonUnique() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("non-unique")]
                     )
                   ]

  is-Unique =
    ?NonUnique()

  prettyprint-BindingClause :
    ScopeClause(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("scopes "), t1__']
                           )
                         ]
    with t1__' := <pp-H-list(prettyprint-NamespaceRef|", ")> t1__

  is-BindingClause =
    ?ScopeClause(_)

  prettyprint-BindingClause :
    NonTransitiveScopeClause(t1__) -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [S("non-transitively scopes "), t1__']
                                        )
                                      ]
    with t1__' := <pp-H-list(prettyprint-NamespaceRef|", ")> t1__

  is-BindingClause =
    ?NonTransitiveScopeClause(_)

  prettyprint-BindingClause :
    RefClause(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__']
                         )
                       ]
    with t1__' := <pp-H-list(prettyprint-RefClausePart|"otherwise")> t1__

  is-BindingClause =
    ?RefClause(_)

  prettyprint-RefClausePart :
    RefClausePart(t1__, t2__, t3__, t4__, t5__, t6__) -> [ H(
                                                             [SOpt(HS(), "0")]
                                                           , [ S("refers to ")
                                                             , t1__'
                                                             , S(" ")
                                                             , t2__'
                                                             , S(" ")
                                                             , t3__'
                                                             , S(" ")
                                                             , t4__'
                                                             , S(" ")
                                                             , t5__'
                                                             , S(" ")
                                                             , t6__'
                                                             ]
                                                           )
                                                         ]
    with t1__' := <pp-one-Z(prettyprint-Disambiguator)> t1__
    with t2__' := <pp-one-Z(prettyprint-NamespaceRef)> t2__
    with t3__' := <pp-one-Z(prettyprint-Term)> t3__
    with t4__' := <pp-H-list(prettyprint-PropertyPattern)> t4__
    with t5__' := <pp-one-Z(prettyprint-InRefScope)> t5__
    with t6__' := <pp-one-Z(prettyprint-Constraints)> t6__

  is-RefClausePart =
    ?RefClausePart(_, _, _, _, _, _)

  prettyprint-BindingClause :
    ImportClause(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [t1__']
                            )
                          ]
    with t1__' := <pp-V-list(prettyprint-ImportClausePart|"0", "otherwise")> t1__

  is-BindingClause =
    ?ImportClause(_)

  prettyprint-ImportClausePart :
    SingleImport(
      t1__
    , t2__
    , t3__
    , t4__
    , t5__
    , t6__
    , t7__
    , t8__
    ) -> [ H(
             [SOpt(HS(), "0")]
           , [ S("imports ")
             , t1__'
             , S(" ")
             , t2__'
             , S(" ")
             , t3__'
             , S(" ")
             , t4__'
             , S(" ")
             , t5__'
             , S(" ")
             , t6__'
             , S(" ")
             , t7__'
             , S(" ")
             , t8__'
             ]
           )
         ]
    with t1__' := <pp-one-Z(prettyprint-Disambiguator)> t1__
    with t2__' := <pp-one-Z(prettyprint-NamespaceRef)> t2__
    with t3__' := <pp-one-Z(prettyprint-Term)> t3__
    with t4__' := <pp-H-list(prettyprint-PropertyPattern)> t4__
    with t5__' := <pp-one-Z(prettyprint-FromRefScope)> t5__
    with t6__' := <pp-one-Z(prettyprint-Alias)> t6__
    with t7__' := <pp-one-Z(prettyprint-IntoDefScopes)> t7__
    with t8__' := <pp-one-Z(prettyprint-Constraints)> t8__

  is-ImportClausePart =
    ?SingleImport(_, _, _, _, _, _, _, _)

  prettyprint-ImportClausePart :
    WildcardImport(t1__, t2__, t3__, t4__, t5__) -> [ H(
                                                        [SOpt(HS(), "0")]
                                                      , [ S("imports ")
                                                        , t1__'
                                                        , S(" ")
                                                        , t2__'
                                                        , S(" ")
                                                        , t3__'
                                                        , S(" ")
                                                        , t4__'
                                                        , S(" ")
                                                        , t5__'
                                                        ]
                                                      )
                                                    ]
    with t1__' := <pp-H-list(prettyprint-RestrictedNamespaceRef|", ")> t1__
    with t2__' := <pp-H-list(prettyprint-PropertyPattern)> t2__
    with t3__' := <pp-one-Z(prettyprint-FromRefScope)> t3__
    with t4__' := <pp-one-Z(prettyprint-IntoDefScopes)> t4__
    with t5__' := <pp-one-Z(prettyprint-Constraints)> t5__

  is-ImportClausePart =
    ?WildcardImport(_, _, _, _, _)

  prettyprint-Alias :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-Alias =
    ?None()

  prettyprint-Alias :
    Alias(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("as "), t1__']
                     )
                   ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__

  is-Alias =
    ?Alias(_)

  prettyprint-BindingClause :
    FilterClause(t1__, t2__, t3__, t4__) -> [ H(
                                                [SOpt(HS(), "0")]
                                              , [ S("filters ")
                                                , t1__'
                                                , S(" ")
                                                , t2__'
                                                ]
                                              )
                                            , t3__'
                                            , t4__'
                                            ]
    with t1__' := <pp-one-Z(prettyprint-NamespaceRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__
    with t3__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Filters)> t3__]
    with t4__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Constraints)> t4__]

  is-BindingClause =
    ?FilterClause(_, _, _, _)

  prettyprint-BindingClause :
    DisambiguateClause(t1__, t2__, t3__, t4__, t5__) -> [ H(
                                                            [SOpt(HS(), "0")]
                                                          , [ S("disambiguates ")
                                                            , t1__'
                                                            , S(" ")
                                                            , t2__'
                                                            ]
                                                          )
                                                        , t3__'
                                                        , t4__'
                                                        , t5__'
                                                        ]
    with t1__' := <pp-one-Z(prettyprint-NamespaceRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__
    with t3__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Filters)> t3__]
    with t4__' := <pp-indent(|"2")> [ S("by ")
                                    , <pp-one-Z(prettyprint-Disambiguator)> t4__
                                    ]
    with t5__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Constraints)> t5__]

  is-BindingClause =
    ?DisambiguateClause(_, _, _, _, _)

  prettyprint-Disambiguator :
    MinimalDistance(t1__, t2__, t3__) -> [ H(
                                             [SOpt(HS(), "0")]
                                           , [ S("minimal distance ")
                                             , t1__'
                                             , S(" ")
                                             , t2__'
                                             , S(" ")
                                             , t3__'
                                             ]
                                           )
                                         ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Relation)> t2__
    with t3__' := <pp-one-Z(prettyprint-Term)> t3__

  is-Disambiguator =
    ?MinimalDistance(_, _, _)

  is-DefKind =
    fail

  is-Unique =
    fail

  is-RefClausePart =
    fail

  is-ImportClausePart =
    fail

  is-Alias =
    fail

  is-BindingClause =
    fail

  is-Disambiguator =
    fail

  prettyprint-DefKind :
    amb([h|hs]) -> <prettyprint-DefKind> h

  prettyprint-Unique :
    amb([h|hs]) -> <prettyprint-Unique> h

  prettyprint-RefClausePart :
    amb([h|hs]) -> <prettyprint-RefClausePart> h

  prettyprint-ImportClausePart :
    amb([h|hs]) -> <prettyprint-ImportClausePart> h

  prettyprint-Alias :
    amb([h|hs]) -> <prettyprint-Alias> h

  prettyprint-BindingClause :
    amb([h|hs]) -> <prettyprint-BindingClause> h

  prettyprint-Disambiguator :
    amb([h|hs]) -> <prettyprint-Disambiguator> h


strategies
  prettyprint-example =
    prettyprint-InDefScopes

  prettyprint-example =
    prettyprint-IntoDefScopes

  prettyprint-example =
    prettyprint-DefScopes

  prettyprint-example =
    prettyprint-DefScope

  prettyprint-example =
    prettyprint-InRefScope

  prettyprint-example =
    prettyprint-FromRefScope

  prettyprint-example =
    prettyprint-RefScope

  prettyprint-example =
    prettyprint-Disambiguator

  prettyprint-InDefScopes :
    Current() -> [ H(
                     []
                   , [S("")]
                   )
                 ]

  is-InDefScopes =
    ?Current()

  prettyprint-InDefScopes :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("in "), t1__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-DefScopes)> t1__

  prettyprint-IntoDefScopes :
    Current() -> [ H(
                     []
                   , [S("")]
                   )
                 ]

  is-IntoDefScopes =
    ?Current()

  prettyprint-IntoDefScopes :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("into "), t1__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-DefScopes)> t1__

  prettyprint-DefScopes :
    Current() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("current scope")]
                   )
                 ]

  is-DefScopes =
    ?Current()

  prettyprint-DefScopes :
    DefScopes(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__']
                         )
                       ]
    with t1__' := <pp-H-list(prettyprint-DefScope|", ")> t1__

  is-DefScopes =
    ?DefScopes(_)

  prettyprint-DefScope :
    Subsequent() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("subsequent scope")]
                      )
                    ]

  is-DefScope =
    ?Subsequent()

  prettyprint-DefScope :
    DefScope(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__

  is-DefScope =
    ?DefScope(_)

  prettyprint-InRefScope :
    Current() -> [ H(
                     []
                   , [S("")]
                   )
                 ]

  is-InRefScope =
    ?Current()

  prettyprint-InRefScope :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("in "), t1__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-RefScope)> t1__

  prettyprint-FromRefScope :
    Current() -> [ H(
                     []
                   , [S("")]
                   )
                 ]

  is-FromRefScope =
    ?Current()

  prettyprint-FromRefScope :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("from "), t1__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-RefScope)> t1__

  prettyprint-RefScope :
    Current() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("current scope")]
                   )
                 ]

  is-RefScope =
    ?Current()

  prettyprint-RefScope :
    Enclosing(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("enclosing "), t1__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-NamespaceRef)> t1__

  is-RefScope =
    ?Enclosing(_)

  prettyprint-RefScope :
    Context(t1__, t2__, t3__, t4__, t5__) -> [ H(
                                                 [SOpt(HS(), "0")]
                                               , [ t1__'
                                                 , S(" ")
                                                 , t2__'
                                                 , S(" ")
                                                 , t3__'
                                                 , S(" ")
                                                 , t4__'
                                                 , S(" ")
                                                 , t5__'
                                                 ]
                                               )
                                             ]
    with t1__' := <pp-one-Z(prettyprint-Disambiguator)> t1__
    with t2__' := <pp-one-Z(prettyprint-NamespaceRef)> t2__
    with t3__' := <pp-one-Z(prettyprint-Term)> t3__
    with t4__' := <pp-H-list(prettyprint-PropertyPattern)> t4__
    with t5__' := <pp-one-Z(prettyprint-InRefScope)> t5__

  is-RefScope =
    ?Context(_, _, _, _, _)

  prettyprint-RefScope :
    RefScope(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__

  is-RefScope =
    ?RefScope(_)

  prettyprint-Disambiguator :
    All() -> [ H(
                 []
               , [S("")]
               )
             ]

  is-Disambiguator =
    ?All()

  prettyprint-Disambiguator :
    Best() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("best")]
                )
              ]

  is-Disambiguator =
    ?Best()

  is-InDefScopes =
    fail

  is-IntoDefScopes =
    fail

  is-DefScopes =
    fail

  is-DefScope =
    fail

  is-InRefScope =
    fail

  is-FromRefScope =
    fail

  is-RefScope =
    fail

  is-Disambiguator =
    fail

  prettyprint-InDefScopes :
    amb([h|hs]) -> <prettyprint-InDefScopes> h

  prettyprint-IntoDefScopes :
    amb([h|hs]) -> <prettyprint-IntoDefScopes> h

  prettyprint-DefScopes :
    amb([h|hs]) -> <prettyprint-DefScopes> h

  prettyprint-DefScope :
    amb([h|hs]) -> <prettyprint-DefScope> h

  prettyprint-InRefScope :
    amb([h|hs]) -> <prettyprint-InRefScope> h

  prettyprint-FromRefScope :
    amb([h|hs]) -> <prettyprint-FromRefScope> h

  prettyprint-RefScope :
    amb([h|hs]) -> <prettyprint-RefScope> h

  prettyprint-Disambiguator :
    amb([h|hs]) -> <prettyprint-Disambiguator> h


strategies
  prettyprint-example =
    prettyprint-Constraints

  prettyprint-example =
    prettyprint-Filters

  prettyprint-example =
    prettyprint-Proposition

  prettyprint-Constraints :
    NoWhere() -> [ H(
                     []
                   , [S("")]
                   )
                 ]

  is-Constraints =
    ?NoWhere()

  prettyprint-Constraints :
    Where(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("where "), t1__']
                     )
                   ]
    with t1__' := <pp-one-Z(prettyprint-Formula)> t1__

  is-Constraints =
    ?Where(_)

  prettyprint-Filters :
    Filter(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("with "), t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-Formula)> t1__

  is-Filters =
    ?Filter(_)

  prettyprint-Proposition :
    PropertyPattern(t1__, t2__, t3__) -> [ H(
                                             [SOpt(HS(), "0")]
                                           , [ t1__'
                                             , S(" has ")
                                             , t2__'
                                             , S(" ")
                                             , t3__'
                                             ]
                                           )
                                         ]
    with t1__' := <pp-one-Z(prettyprint-VarRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-PropertyRef)> t2__
    with t3__' := <pp-one-Z(prettyprint-Pattern)> t3__

  is-Proposition =
    ?PropertyPattern(_, _, _)

  is-Constraints =
    fail

  is-Filters =
    fail

  is-Proposition =
    fail

  prettyprint-Constraints :
    amb([h|hs]) -> <prettyprint-Constraints> h

  prettyprint-Filters :
    amb([h|hs]) -> <prettyprint-Filters> h

  prettyprint-Proposition :
    amb([h|hs]) -> <prettyprint-Proposition> h
