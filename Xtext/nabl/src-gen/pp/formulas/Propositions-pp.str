module nabl/src-gen/pp/formulas/Propositions-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  nabl/src-gen/signatures/formulas/Propositions-sig


imports
  nabl/src-gen/signatures/terms/Terms-sig
  nabl/src-gen/signatures/terms/Vars-sig
  nabl/src-gen/signatures/core/Namespaces-sig
  nabl/src-gen/signatures/core/Scopes-sig
  nabl/src-gen/signatures/core/Properties-sig


imports
  nabl/src-gen/pp/terms/Terms-pp
  nabl/src-gen/pp/terms/Vars-pp
  nabl/src-gen/pp/core/Namespaces-pp
  nabl/src-gen/pp/core/Scopes-pp
  nabl/src-gen/pp/core/Properties-pp


strategies
  prettyprint-example =
    prettyprint-Proposition

  prettyprint-Proposition :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  is-Proposition =
    ?True()

  prettyprint-Proposition :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  is-Proposition =
    ?False()

  prettyprint-Proposition :
    Eq(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__', S(" == "), t2__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-VarRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Proposition =
    ?Eq(_, _)

  prettyprint-Proposition :
    Match(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(" => "), t2__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-VarRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-Pattern)> t2__

  is-Proposition =
    ?Match(_, _)

  prettyprint-Proposition :
    DefOf(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ S("definition of ")
                             , t1__'
                             , S(" => ")
                             , t2__'
                             ]
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-VarRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-Var)> t2__

  is-Proposition =
    ?DefOf(_, _)

  prettyprint-Proposition :
    DefOf(t1__, t2__, t3__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [ S("definition of ")
                                   , t1__'
                                   , S(" ")
                                   , t2__'
                                   , S(" => ")
                                   , t3__'
                                   ]
                                 )
                               ]
    with t1__' := <pp-one-Z(prettyprint-NamespaceRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-VarRef)> t2__
    with t3__' := <pp-one-Z(prettyprint-Var)> t3__

  is-Proposition =
    ?DefOf(_, _, _)

  prettyprint-Proposition :
    ScopeOf(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__', S(" => "), t2__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Scope)> t1__
    with t2__' := <pp-one-Z(prettyprint-Var)> t2__

  is-Proposition =
    ?ScopeOf(_, _)

  prettyprint-Proposition :
    ResolvesTo(t1__, t2__, t3__) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [ t1__'
                                        , S(" resolves to ")
                                        , t2__'
                                        , S(" ")
                                        , t3__'
                                        ]
                                      )
                                    ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-NamespaceRef)> t2__
    with t3__' := <pp-one-Z(prettyprint-Var)> t3__

  is-Proposition =
    ?ResolvesTo(_, _, _)

  prettyprint-Proposition :
    HasProperty(t1__, t2__, t3__) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [ t1__'
                                         , S(" has ")
                                         , t2__'
                                         , S(" ")
                                         , t3__'
                                         ]
                                       )
                                     ]
    with t1__' := <pp-one-Z(prettyprint-VarRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-PropertyRef)> t2__
    with t3__' := <pp-one-Z(prettyprint-Var)> t3__

  is-Proposition =
    ?HasProperty(_, _, _)

  prettyprint-Proposition :
    InRelation(t1__, t2__, t3__) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [ t1__'
                                        , S(" ")
                                        , t2__'
                                        , S(" ")
                                        , t3__'
                                        ]
                                      )
                                    ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Relation)> t2__
    with t3__' := <pp-one-Z(prettyprint-Term)> t3__

  is-Proposition =
    ?InRelation(_, _, _)

  is-Proposition =
    fail

  prettyprint-Proposition :
    amb([h|hs]) -> <prettyprint-Proposition> h
