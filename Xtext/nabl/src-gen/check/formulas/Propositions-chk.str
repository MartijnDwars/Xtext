module nabl/src-gen/check/formulas/Propositions-chk

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  nabl/src-gen/signatures/formulas/Propositions-sig


imports
  nabl/src-gen/signatures/terms/Terms-sig
  nabl/src-gen/signatures/terms/Vars-sig
  nabl/src-gen/signatures/core/Namespaces-sig
  nabl/src-gen/signatures/core/Scopes-sig
  nabl/src-gen/signatures/core/Properties-sig


imports
  nabl/src-gen/check/terms/Terms-chk
  nabl/src-gen/check/terms/Vars-chk
  nabl/src-gen/check/core/Namespaces-chk
  nabl/src-gen/check/core/Scopes-chk
  nabl/src-gen/check/core/Properties-chk


strategies
  check-example =
    check-Proposition

  check-Proposition :
    True() -> <id>

  is-Proposition-with-constructor =
    ?True()

  check-Proposition :
    False() -> <id>

  is-Proposition-with-constructor =
    ?False()

  check-Proposition :
    Eq(t1__, t2__) -> <id>
    with <(check-VarRef <+ error-VarRef)> t1__
    with <(check-Term <+ error-Term)> t2__

  is-Proposition-with-constructor =
    ?Eq(_, _)

  check-Proposition :
    Match(t1__, t2__) -> <id>
    with <(check-VarRef <+ error-VarRef)> t1__
    with <(check-Pattern <+ error-Pattern)> t2__

  is-Proposition-with-constructor =
    ?Match(_, _)

  check-Proposition :
    DefOf(t1__, t2__) -> <id>
    with <(check-VarRef <+ error-VarRef)> t1__
    with <(check-Var <+ error-Var)> t2__

  is-Proposition-with-constructor =
    ?DefOf(_, _)

  check-Proposition :
    DefOf(t1__, t2__, t3__) -> <id>
    with <(check-NamespaceRef <+ error-NamespaceRef)> t1__
    with <(check-VarRef <+ error-VarRef)> t2__
    with <(check-Var <+ error-Var)> t3__

  is-Proposition-with-constructor =
    ?DefOf(_, _, _)

  check-Proposition :
    ScopeOf(t1__, t2__) -> <id>
    with <(check-Scope <+ error-Scope)> t1__
    with <(check-Var <+ error-Var)> t2__

  is-Proposition-with-constructor =
    ?ScopeOf(_, _)

  check-Proposition :
    ResolvesTo(t1__, t2__, t3__) -> <id>
    with <(check-Term <+ error-Term)> t1__
    with <(check-NamespaceRef <+ error-NamespaceRef)> t2__
    with <(check-Var <+ error-Var)> t3__

  is-Proposition-with-constructor =
    ?ResolvesTo(_, _, _)

  check-Proposition :
    HasProperty(t1__, t2__, t3__) -> <id>
    with <(check-VarRef <+ error-VarRef)> t1__
    with <(check-PropertyRef <+ error-PropertyRef)> t2__
    with <(check-Var <+ error-Var)> t3__

  is-Proposition-with-constructor =
    ?HasProperty(_, _, _)

  check-Proposition :
    InRelation(t1__, t2__, t3__) -> <id>
    with <(check-Term <+ error-Term)> t1__
    with <(check-Relation <+ error-Relation)> t2__
    with <(check-Term <+ error-Term)> t3__

  is-Proposition-with-constructor =
    ?InRelation(_, _, _)

  is-Proposition-with-constructor =
    fail

  check-Proposition :
    amb([h|hs]) -> <check-Proposition> h

  error-Proposition =
    debug(!"Unexpected constructor. Expected constructor from sort Proposition instead. ")
