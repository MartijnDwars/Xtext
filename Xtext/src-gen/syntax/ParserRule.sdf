
module ParserRule
imports Common

exports
  context-free start-symbols
    AbstractRule

  context-free syntax
    "="                              -> Operator                       {cons("Assignment")}
    "+="                             -> Operator                       {cons("AddAssignment")}
    "?="                             -> Operator                       {cons("BooleanAssignment")}
    ID                               -> TypeRef                        {cons("TypeRef")}
    ID Returns? ":" Alternatives ";" -> AbstractRule                   {cons("ParserRule")}
    "returns" TypeRef                -> Returns                        {cons("Returns")}
    {UnorderedGroup "|"}+            -> Alternatives                   {cons("Alternatives")}
    {Group "&"}+                     -> UnorderedGroup                 {cons("UnorderedGroup")}
    AbstractToken+                   -> Group                          {cons("Group")}
    AbstractTokenWithCardinality     -> AbstractToken                  {cons("AbstractTokenWithCardinality")}
    Action                           -> AbstractToken                  {cons("Action")}
    Assignment Cardinality?          -> AbstractTokenWithCardinality   {cons("Assignment")}
    AbstractTerminal Cardinality?    -> AbstractTokenWithCardinality   {cons("AbstractTerminal")}
    ID Operator AssignableTerminal   -> Assignment                     {cons("Assignment")}
    STRING                           -> AssignableTerminal             {cons("Keyword")}
    RuleCall                         -> AssignableTerminal             {cons("RuleCall")}
    ParenthesizedAssignableElement   -> AssignableTerminal             {cons("ParenthesizedAssignableElement")}
    "[" TypeRef "]"                  -> AssignableTerminal             {cons("CrossReference")}
    ID                               -> RuleCall                       {cons("RuleCall")}
    "(" AssignableAlternatives ")"   -> ParenthesizedAssignableElement {cons("ParenthesizedAssignableElement")}
    {AssignableTerminal "|"}+        -> AssignableAlternatives         {cons("AssignableAlternatives")}
    "{" TypeRef ActionCurrent? "}"   -> Action                         {cons("Action")}
    "." ID Operator "current"        -> ActionCurrent                  {cons("ActionCurrent")}
    STRING                           -> AbstractTerminal               {cons("Keyword")}
    ParenthesizedElement             -> AbstractTerminal               {cons("ParenthesizedElement")}
    RuleCall                         -> AbstractTerminal               {cons("RuleCall")}
    "(" Alternatives ")"             -> ParenthesizedElement           {cons("ParenthesizedElement")}

  context-free syntax
    CONTENTCOMPLETE -> AbstractRule                   {cons("COMPLETION-AbstractRule")}
    CONTENTCOMPLETE -> Returns                        {cons("COMPLETION-Returns")}
    CONTENTCOMPLETE -> Alternatives                   {cons("COMPLETION-Alternatives")}
    CONTENTCOMPLETE -> UnorderedGroup                 {cons("COMPLETION-UnorderedGroup")}
    CONTENTCOMPLETE -> Assignment                     {cons("COMPLETION-Assignment")}
    CONTENTCOMPLETE -> AssignableTerminal             {cons("COMPLETION-AssignableTerminal")}
    CONTENTCOMPLETE -> ParenthesizedAssignableElement {cons("COMPLETION-ParenthesizedAssignableElement")}
    CONTENTCOMPLETE -> AssignableAlternatives         {cons("COMPLETION-AssignableAlternatives")}
    CONTENTCOMPLETE -> Action                         {cons("COMPLETION-Action")}
    CONTENTCOMPLETE -> ActionCurrent                  {cons("COMPLETION-ActionCurrent")}
    CONTENTCOMPLETE -> ParenthesizedElement           {cons("COMPLETION-ParenthesizedElement")}