
module TerminalRule
imports Common ParserRule

exports
  context-free start-symbols
    AbstractRule

  context-free syntax
    "terminal" TerminalName ":" TerminalAlternatives+ ";" -> AbstractRule         {cons("TerminalRule")}
    "fragment" ID                                         -> TerminalName         {cons("Fragment")}
    ID Returns?                                           -> TerminalName         {cons("Returns")}
    TerminalGroup                                         -> TerminalAlternatives {cons("TerminalAlternatives")}
    TerminalToken                                         -> TerminalGroup        {cons("TerminalGroup")}
    TerminalTokenElement Cardinality?                     -> TerminalToken        {cons("TerminalToken")}
    "(" TerminalAlternatives ")"                          -> TerminalTokenElement {cons("ParenthesizedTerminalElement")}
    STRING                                                -> TerminalTokenElement {cons("Keyword")}
    RuleCall                                              -> TerminalTokenElement {cons("RuleCall")}
    STRING ".." STRING                                    -> TerminalTokenElement {cons("CharacterRange")}
    WILDCARD                                              -> TerminalTokenElement {cons("Wildcard")}
    "!" TerminalTokenElement                              -> TerminalTokenElement {cons("NegatedToken")}
    "->" TerminalTokenElement                             -> TerminalTokenElement {cons("UntilToken")}
    EOF                                                   -> TerminalTokenElement {cons("TerminalTokenElement")}
    "EOF"                                                 -> EOF                  {cons("EOF")}

  context-free syntax
    CONTENTCOMPLETE -> AbstractRule         {cons("COMPLETION-AbstractRule")}
    CONTENTCOMPLETE -> TerminalTokenElement {cons("COMPLETION-TerminalTokenElement")}