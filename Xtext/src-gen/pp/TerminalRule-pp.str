module src-gen/pp/TerminalRule-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/TerminalRule-sig


imports
  src-gen/signatures/Common-sig
  src-gen/signatures/ParserRule-sig


imports
  src-gen/pp/Common-pp
  src-gen/pp/ParserRule-pp


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-AbstractRule


strategies
  prettyprint-example =
    prettyprint-AbstractRule

  prettyprint-example =
    prettyprint-TerminalName

  prettyprint-example =
    prettyprint-TerminalAlternatives

  prettyprint-example =
    prettyprint-TerminalGroup

  prettyprint-example =
    prettyprint-TerminalToken

  prettyprint-example =
    prettyprint-TerminalTokenElement

  prettyprint-example =
    prettyprint-EOF

  prettyprint-AbstractRule :
    TerminalRule(t1__, t2__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ S("terminal ")
                                    , t1__'
                                    , S(" : ")
                                    , t2__'
                                    , S(" ;")
                                    ]
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-TerminalName)> t1__
    with t2__' := <pp-H-list(prettyprint-TerminalAlternatives)> t2__

  is-AbstractRule =
    ?TerminalRule(_, _)

  prettyprint-TerminalName :
    Fragment(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("fragment "), t1__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__

  is-TerminalName =
    ?Fragment(_)

  prettyprint-TerminalName :
    Returns(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__', S(" "), t2__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-ID)> t1__
    with t2__' := <pp-option(pp-one-Z(prettyprint-Returns))> t2__

  is-TerminalName =
    ?Returns(_, _)

  prettyprint-TerminalAlternatives :
    TerminalAlternatives(t1__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__']
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-TerminalGroup)> t1__

  is-TerminalAlternatives =
    ?TerminalAlternatives(_)

  prettyprint-TerminalGroup :
    TerminalGroup(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-TerminalToken)> t1__

  is-TerminalGroup =
    ?TerminalGroup(_)

  prettyprint-TerminalToken :
    TerminalToken(t1__, t2__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [t1__', S(" "), t2__']
                                   )
                                 ]
    with t1__' := <pp-one-Z(prettyprint-TerminalTokenElement)> t1__
    with t2__' := <pp-option(pp-one-Z(prettyprint-Cardinality))> t2__

  is-TerminalToken =
    ?TerminalToken(_, _)

  prettyprint-TerminalTokenElement :
    ParenthesizedTerminalElement(t1__) -> [ H(
                                              [SOpt(HS(), "0")]
                                            , [ S("( ")
                                              , t1__'
                                              , S(" )")
                                              ]
                                            )
                                          ]
    with t1__' := <pp-one-Z(prettyprint-TerminalAlternatives)> t1__

  is-TerminalTokenElement =
    ?ParenthesizedTerminalElement(_)

  prettyprint-TerminalTokenElement :
    Keyword(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [t1__']
                       )
                     ]
    with t1__' := <pp-one-Z(prettyprint-STRING)> t1__

  is-TerminalTokenElement =
    ?Keyword(_)

  prettyprint-TerminalTokenElement :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-TerminalTokenElement)
    where t1__' := <pp-one-Z(prettyprint-RuleCall)> t1__

  prettyprint-TerminalTokenElement :
    CharacterRange(t1__, t2__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__', S(" .. "), t2__']
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-STRING)> t1__
    with t2__' := <pp-one-Z(prettyprint-STRING)> t2__

  is-TerminalTokenElement =
    ?CharacterRange(_, _)

  prettyprint-TerminalTokenElement :
    Wildcard(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-WILDCARD)> t1__

  is-TerminalTokenElement =
    ?Wildcard(_)

  prettyprint-TerminalTokenElement :
    NegatedToken(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("! "), t1__']
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-TerminalTokenElement)> t1__

  is-TerminalTokenElement =
    ?NegatedToken(_)

  prettyprint-TerminalTokenElement :
    UntilToken(t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("-> "), t1__']
                          )
                        ]
    with t1__' := <pp-one-Z(prettyprint-TerminalTokenElement)> t1__

  is-TerminalTokenElement =
    ?UntilToken(_)

  prettyprint-TerminalTokenElement :
    TerminalTokenElement(t1__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__']
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-EOF)> t1__

  is-TerminalTokenElement =
    ?TerminalTokenElement(_)

  prettyprint-EOF :
    EOF() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("EOF")]
               )
             ]

  is-EOF =
    ?EOF()

  is-AbstractRule =
    fail

  is-TerminalName =
    fail

  is-TerminalAlternatives =
    fail

  is-TerminalGroup =
    fail

  is-TerminalToken =
    fail

  is-TerminalTokenElement =
    fail

  is-EOF =
    fail