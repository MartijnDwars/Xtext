module test

imports
  libstratego-lib
  generate/add-actions
  include/Xtext
  
strategies
  main =
    test-suite(!"add-action",
      test-add-action-redundant;
      test-add-action-no-assignment;
      test-add-action-simple;
      test-add-action-name;
      test-add-action-multiple-features
    )

  // Add actions
  test-add-action-redundant =
    apply-test(!"add-action on ParserRule that already has an action"
    , add-action
    , !ParserRule(
        "Person", None(), None()
      , Alternatives(
          [ UnorderedGroup(
              [Group(
                 [ ActionAbstractToken(Action(TypeRef(None(), "Name"), None()))
                 , AssignmentAbstractToken(None(), "name", Assignment(), RuleCall("ID"), None())]
               )]
            )
          ]
        )
      )
    , !ParserRule(
        "Person", None(), None()
      , Alternatives(
          [ UnorderedGroup(
              [Group(
                 [ ActionAbstractToken(Action(TypeRef(None(), "Name"), None()))
                 , AssignmentAbstractToken(None(), "name", Assignment(), RuleCall("ID"), None())]
               )]
            )
          ]
        )
      )
    )

  test-add-action-no-assignment =
    apply-test(!"add-action on simple ParserRule that has no assignment"
    , add-action
		, !ParserRule(
        "Person"
      , None()
      , None()
      , Alternatives(
          [UnorderedGroup([Group([AbstractTerminalAbstractToken(Keyword("'x'"), None())])])]
        )
      )
	  , !ParserRule(
        "Person"
      , None()
      , None()
      , Alternatives(
          [UnorderedGroup([Group([AbstractTerminalAbstractToken(Keyword("'x'"), None())])])]
        )
      )
	  )
   
  test-add-action-simple =
    apply-test(!"add-action on simple ParserRule"
    , add-action
    , !ParserRule(
        "Person", None(), None()
      , Alternatives(
          [ UnorderedGroup(
              [Group(
                 [AssignmentAbstractToken(None(), "name", Assignment(), RuleCall("ID"), None())]
               )]
            )
          ]
        )
      )
    , !ParserRule(
        "Person", None(), None()
      , Alternatives(
          [ UnorderedGroup(
              [ Group(
                  [ ActionAbstractToken(Action(TypeRef(None(), "Name"), None()))
                  , AssignmentAbstractToken(None(), "name", Assignment(), RuleCall("ID"), None())
                  ]
                )
              ]
            )
          ]
        )
      )
    )
    
  test-add-action-name =
    apply-test(!"add-action uses first feature capitalized as action name"
    , add-action
    , !ParserRule(
        "Person", None(), None()
      , Alternatives(
          [ UnorderedGroup(
              [Group(
                 [AssignmentAbstractToken(None(), "abcdef", Assignment(), RuleCall("ID"), None())]
               )]
            )
          ]
        )
      )
    , !ParserRule(
        "Person", None(), None()
      , Alternatives(
          [ UnorderedGroup(
              [ Group(
                  [ ActionAbstractToken(Action(TypeRef(None(), "Abcdef"), None()))
                  , AssignmentAbstractToken(None(), "abcdef", Assignment(), RuleCall("ID"), None())
                  ]
                )
              ]
            )
          ]
        )
      )
    )
    
  test-add-action-multiple-features =
    apply-test(!"add-action on rule with multiple features"
    , add-action
    , !ParserRule(
        "Person", None(), None()
      , Alternatives(
          [ UnorderedGroup(
              [ Group(
                  [ AssignmentAbstractToken(None(), "a", Assignment(), Keyword("'x'"), None())
                  , AssignmentAbstractToken(None(), "b", Assignment(), Keyword("'y'"), None())
                  ]
                )
              ]
            )
          ]
        )
      )
    , !ParserRule(
        "Person", None(), None()
      , Alternatives(
          [ UnorderedGroup(
              [ Group(
                  [ ActionAbstractToken(Action(TypeRef(None(), "A"), None()))
                  , AssignmentAbstractToken(None(), "a", Assignment(), Keyword("'x'"), None())
                  , AssignmentAbstractToken(None(), "b", Assignment(), Keyword("'y'"), None())
                  ]
                )
              ]
            )
          ]
        )
      )
    )