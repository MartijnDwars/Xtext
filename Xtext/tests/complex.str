module complex

imports
	libstratego-lib
  	lib/editor-common.generated
  	include/Xtext
  	include/TemplateLang
	generate/generate

strategies
	main = 
		test-suite(!"complex",
		test-complex-list-label;
		test-complex-list-label-paran;
		test-complex-list-no-label;
		test-complex-list-no-label-paran;
		test-complex-list-new;
		test-complex-list-method
		)
		
	test-complex-list-label =
		apply-and-check(!"Check complex list convertion with label"
		, gen-sdf-debug
		, <parse-xtext-string> "
		  Greeting:
  			p += Q(',' p += Q)*
  		  ;"
  		,!SDFSection(
			  ContextFreeSyntax(
			    [ SdfProductionWithCons(
			        SortCons(SortDef("Greeting"), Constructor("Greeting-11"))
			      , Rhs([Opt(Sort("Greeting-SubRule-16"))])
			      , NoAttrs()
			      )
			    , SdfProduction(
			        SortDef("Greeting-SubRule-16")
			      , Rhs(
			          [Label(Unquoted("p"), Sort("Q")), IterStar(Sort("Greeting-SubRule-16-SubRule-0"))]
			        )
			      , NoAttrs()
			      )
			    , SdfProduction(
			        SortDef("Greeting-SubRule-16-SubRule-0")
			      , Rhs(
			          [Lit("\",\""), Label(Unquoted("p"), Sort("Q"))]
			        )
			      , NoAttrs()
			      )
			    ]
			  )
			)
		)
		
		test-complex-list-label-paran =
			apply-and-check(!"Check complex list convertion with label and paranthesis"
			, gen-sdf-debug
			, <parse-xtext-string> "
			  Greeting:
	  			(p += Q(',' p += Q)*)?
	  		  ;"
	  		,!SDFSection(
				  ContextFreeSyntax(
				    [ SdfProductionWithCons(
				        SortCons(SortDef("Greeting"), Constructor("Greeting-11"))
				      , Rhs([Opt(Sort("Greeting-SubRule-16"))])
				      , NoAttrs()
				      )
				    , SdfProduction(
				        SortDef("Greeting-SubRule-16")
				      , Rhs(
				          [Label(Unquoted("p"), Sort("Q")), IterStar(Sort("Greeting-SubRule-16-SubRule-0"))]
				        )
				      , NoAttrs()
				      )
				    , SdfProduction(
				        SortDef("Greeting-SubRule-16-SubRule-0")
				      , Rhs(
				          [Lit("\",\""), Label(Unquoted("p"), Sort("Q"))]
				        )
				      , NoAttrs()
				      )
				    ]
				  )
				)
			)
		
		test-complex-list-no-label =
			apply-and-check(!"Check complex list convertion without label"
			, gen-sdf-debug
			, <parse-xtext-string> "
				Greeting:
				  'a' ('.' 'a')*
				;"
	  		,!SDFSection(
				  ContextFreeSyntax(
				    [ SdfProduction(
				        SortDef("Greeting")
				      , Rhs([Lit("\"a\""), IterStar(Sort("Greeting-SubRule-4"))])
				      , NoAttrs()
				      )
				    , SdfProduction(
				        SortDef("Greeting-SubRule-4")
				      , Rhs([Lit("\".\""), Lit("\"a\"")])
				      , NoAttrs()
				      )
				    ]
				  )
				)
			)
			
		test-complex-list-no-label-paran =
			apply-and-check(!"Check complex list convertion without labels and with paranthesis"
			, gen-sdf-debug
			, <parse-xtext-string> "
				Greeting:
				  ('a' ('.' 'a')*)?
				;"
	  		,!SDFSection(
				  ContextFreeSyntax(
				    [ SdfProduction(
				        SortDef("Greeting")
				      , Rhs([Opt(Sort("Greeting-SubRule-17"))])
				      , NoAttrs()
				      )
				    , SdfProduction(
				        SortDef("Greeting-SubRule-17")
				      , Rhs([Lit("\"a\""), IterStar(Sort("Greeting-SubRule-17-SubRule-0"))])
				      , NoAttrs()
				      )
				    , SdfProduction(
				        SortDef("Greeting-SubRule-17-SubRule-0")
				      , Rhs([Lit("\".\""), Lit("\"a\"")])
				      , NoAttrs()
				      )
				    ]
				  )
				)
			)
		
		test-complex-list-new =
			apply-and-check(!"check for complex list convertion, new"
			, gen-sdf-debug
			, <parse-xtext-string> "
			  	New: 
			  		'new' type=ClassType '(' (args+=Argument (',' args+=Argument)*)? ')'
			  ;"
			, !SDFSection(
				  ContextFreeSyntax(
				    [ SdfProductionWithCons(
				        SortCons(SortDef("New"), Constructor("New-2"))
				      , Rhs(
				          [ Lit("\"new\"")
				          , Label(Quoted("\"type\""), Sort("ClassType"))
				          , Lit("\"(\"")
				          , Opt(Sort("New-SubRule-2"))
				          , Lit("\")\"")
				          ]
				        )
				      , NoAttrs()
				      )
				    , SdfProduction(
				        SortDef("New-SubRule-2")
				      , Rhs(
				          [Label(Quoted("\"args\""), Sort("Argument")), IterStar(Sort("New-SubRule-2-SubRule-0"))]
				        )
				      , NoAttrs()
				      )
				    , SdfProduction(
				        SortDef("New-SubRule-2-SubRule-0")
				      , Rhs(
				          [Lit("\",\""), Label(Quoted("\"args\""), Sort("Argument"))]
				        )
				      , NoAttrs()
				      )
				    ]
				  )
				)
			)
			
		test-complex-list-method =
			apply-and-check(!"Complex list convertion, method"
				, gen-sdf-debug
				, <parse-xtext-string> "
				  MethodCall: 
				  	name=[Method] '(' (args+=Argument (',' args+=Argument)*)? ')'
				  ;"
				, !SDFSection(
					  ContextFreeSyntax(
					    [ SdfProductionWithCons(
					        SortCons(SortDef("MethodCall"), Constructor("MethodCall-3"))
					      , Rhs(
					          [ Label(Quoted("\"name\""), Sort("ID"))
					          , Lit("\"(\"")
					          , Opt(Sort("MethodCall-SubRule-3"))
					          , Lit("\")\"")
					          ]
					        )
					      , NoAttrs()
					      )
					    , SdfProduction(
					        SortDef("MethodCall-SubRule-3")
					      , Rhs(
					          [Label(Quoted("\"args\""), Sort("Argument")), IterStar(Sort("MethodCall-SubRule-3-SubRule-0"))]
					        )
					      , NoAttrs()
					      )
					    , SdfProduction(
					        SortDef("MethodCall-SubRule-3-SubRule-0")
					      , Rhs(
					          [Lit("\",\""), Label(Quoted("\"args\""), Sort("Argument"))]
					        )
					      , NoAttrs()
					      )
					    ]
					  )
					)
			 )
		