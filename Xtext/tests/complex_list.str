module complex_list

imports
  libstratego-lib
  lib/editor-common.generated
  include/Xtext
  include/TemplateLang
  generate/xtext-complex-list

strategies
  main =
    test-suite(!"complex_list"
    , list-empty
    ; list-too-small
    ; no-complex-list
    ; inverted-complex-list
    ; complex-list-suffix-list
    ; prefix-list-complex-list
    ; complex-list
    )
    
    list-empty =
      apply-test(!"list-empty",
        replace-complex-list,
        ![],
        ![]
      )
    
    list-too-small =
      apply-test(!"list-too-small",
        replace-complex-list,
        ![AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None())],
        ![AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None())]
      )
    
    no-complex-list = 
      apply-test(!"no-complex-list",
        replace-complex-list,
        ![AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None()), AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None())],
        ![AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None()), AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None())]
      )
    
    inverted-complex-list =
      apply-test(!"inverted-complex-list",
        replace-complex-list
      , ![AbstractTerminalAbstractToken(
	          Alternatives(
	            [ UnorderedGroup(
	                [ Group(
	                    [ AbstractTerminalAbstractToken(Keyword("','"), None())
	                    , AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None())
	                    ]
	                  )
	                ]
	              )
	            ]
	          )
	        , Some(Any())
	      ),
	      AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None())
	      ],
	      ![AbstractTerminalAbstractToken(
	        Alternatives(
	          [ UnorderedGroup(
	              [ Group(
	                  [ AbstractTerminalAbstractToken(Keyword("','"), None())
	                  , AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None())
	                  ]
	                )
	              ]
	            )
	          ]
	        )
	      , Some(Any())
	      ),        
        AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None())]
      )
    
    complex-list =
      apply-test(!"complex-list",
        replace-complex-list,
	      ![ AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None())
	      , AbstractTerminalAbstractToken(
	          Alternatives(
	            [ UnorderedGroup(
	                [ Group(
	                    [ AbstractTerminalAbstractToken(Keyword("','"), None())
	                    , AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None())
	                    ]
	                  )
	                ]
	              )
	            ]
	          )
	        , Some(Any())
	        )
	      ],
	      ![(IterSep(Label(Quoted("\"p\""), Sort("Q")), Lit("\",\"")), [])]
      )
  
  complex-list-suffix-list =
    apply-test(!"complex-list-suffix-list"
    , replace-complex-list
    , ![ AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None())
      , AbstractTerminalAbstractToken(
          Alternatives(
            [ UnorderedGroup(
                [ Group(
                    [ AbstractTerminalAbstractToken(Keyword("','"), None())
                    , AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None())
                    ]
                  )
                ]
              )
            ]
          )
        , Some(Any())
        )
      , AbstractTerminalAbstractToken(Keyword("a"), None())
      ]
    , ![(IterSep(Label(Quoted("\"p\""), Sort("Q")), Lit("\",\"")), []), AbstractTerminalAbstractToken(Keyword("a"), None())]
  )
  
  prefix-list-complex-list =
    apply-test(!"prefix-list-complex-list"
	  , replace-complex-list
	  , ![AbstractTerminalAbstractToken(Keyword("a"), None()),
	        AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None())
	      , AbstractTerminalAbstractToken(
	          Alternatives(
	            [ UnorderedGroup(
	                [ Group(
	                    [ AbstractTerminalAbstractToken(Keyword("','"), None())
	                    , AssignmentAbstractToken(None(), "p", AddAssignment(), RuleCall("Q"), None())
	                    ]
	                  )
	                ]
	              )
	            ]
	          )
	        , Some(Any())
	        )
	    ]
	  , ![AbstractTerminalAbstractToken(Keyword("a"), None()), (IterSep(Label(Quoted("\"p\""), Sort("Q")),Lit("\",\"")), [])]
    )