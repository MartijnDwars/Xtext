module terminal-rule

imports
	
	include/Xtext
	include/TemplateLang
	generate/common

rules

	list-to-conc:
		[singleton] -> singleton
	
	list-to-conc:
		[head | tail] -> Conc(head, <list-to-conc> tail)
	
	// gen-rule:
	// 	TerminalRule(Returns(terminal-name, _), TerminalAlternatives(terminal-alternatives)) -> $[
	// 		lexical syntax
	// 	    	[terminal-name] = [<map(gen-terminal-alternative) ; flatten-list ; separate-by(|" | ")> terminal-alternatives]
	// 	]
	
	gen-rule:
		TerminalRule(Returns(terminal-name, _), terminal-token-element) ->
			LexicalSyntax([SdfProduction(SortDef(terminal-name), Rhs([<gen-terminal-token-element> terminal-token-element]), NoAttrs())])
	
	// gen-terminal-alternative:
	// 	TerminalGroup(terminal-group) -> $<[<gen-terminal-group>]>
	// 	where
	// 		gen-terminal-group := <map(gen-terminal-group) ; concat-strings> terminal-group
	
	gen-terminal-alternative:
		TerminalGroup(terminal-group) -> gen-terminal-group
		where
			gen-terminal-group := <map(gen-terminal-group)> terminal-group
	
	// gen-terminal-group:
	// 	TerminalToken(terminal-token-element, cardinality-opt) -> $[[<gen-terminal-token-element> terminal-token-element][<gen-cardinality-opt> cardinality-opt]]

	gen-terminal-group:
		TerminalToken(terminal-token-element, cardinality-opt) -> <gen-cardinality-opt> (cardinality-opt, <gen-terminal-token-element> terminal-token-element)
	
	gen-cardinality-opt:
		(None(), terminal-token-element) -> terminal-token-element

	gen-cardinality-opt:
		(Some(cardinality), terminal-token-element) -> <gen-cardinality> (cardinality, terminal-token-element)

	gen-cardinality:
		(Optional(), terminal-token-element) -> Opt(terminal-token-element)

	gen-cardinality:
		(Multiple(), terminal-token-element) -> Iter(terminal-token-element)
	
	gen-cardinality:
		(Any(), terminal-token-element) -> IterStar(terminal-token-element)
	
	// gen-terminal-token-element:
	// 	TerminalAlternatives(terminal-alternatives) -> $<[<gen-terminal-alternative>]>
	// 	where
	// 		gen-terminal-alternative := <map(gen-terminal-alternative) ; flatten-list ; concat-strings> terminal-alternatives
	
	gen-terminal-token-element:
		TerminalAlternatives(terminal-alternatives) -> CharClass(Simple(Present(gen-terminal-alternative)))
		where
			gen-terminal-alternative := <map(gen-terminal-alternative) ; flatten-list ; list-to-conc> terminal-alternatives
	
	// gen-terminal-token-element:
	// 	Keyword(s) -> s
	
	gen-terminal-token-element:
		Keyword(s) -> Short(s)
	
	// gen-terminal-token-element:
	// 	CharacterRange(x,y) -> $[[x]-[y]]
	
	gen-terminal-token-element:
		CharacterRange(x,y) -> Range(<gen-terminal-token-element> x, <gen-terminal-token-element> y)
	
	gen-terminal-token-element:
		RuleCall(reference) -> <fail>
		where
			<debug> "TODO"
	
	// gen-terminal-token-element:
	// 	NegatedToken(terminal-token-element) -> $<~[<gen-terminal-token-element>]>
	// 	where
	// 		gen-terminal-token-element := <gen-terminal-token-element> terminal-token-element
	
	gen-terminal-token-element:
		NegatedToken(terminal-token-element) -> Comp(<gen-terminal-token-element> terminal-token-element)