module terminal-rule

imports
	
	include/Xtext
	include/TemplateLang
	generate/common

signature

  constructors
    Parenthetical : Unknown -> Unknown
    
rules
	
	gen-rule:
		TerminalRule(head, alternatives) ->
			SDFSection(LexicalSyntax([SdfProduction(SortDef(name), rhs, NoAttrs())]))
			where
				name := <gen-rule-name> head
			; syntax-rules := <gen-terminal-token-element ; make-list> alternatives
		  ; rhs          := <innermost(post-process-terminal-rule)> Rhs(syntax-rules)
  
  /**
   * Turn the head into a name. Head of a parserRule can be either a Fragment or Returns.
   */
  gen-rule-name:
  	Fragment(name) -> <sort-name> name
  
  gen-rule-name:
  	Returns(name, _) -> <sort-name> name
  
  /**
   * Turn a non-list into a list or return the given list
   */
  make-list = is-list < id + ![<id>]
	
  post-process-terminal-rule:
    CharClass(Simple(Present(Alt(x, y)))) -> Alt(x, y)
  
  /**
   * Final rule to remove outermost single parenthetical
   */
  post-process-terminal-rule:
    Rhs([Parenthetical(x)]) -> Rhs([x])
  
  /**
   * Remove redundant parenthesis. A CharClass already has square brackets.
   */
  post-process-terminal-rule:
    Parenthetical(CharClass(x)) -> CharClass(x)

  /**
   * Remove redundant parenthesis. A Sequence already has parenthesis.
   */
  post-process-terminal-rule:
    Parenthetical(Sequence(h, t)) -> Sequence(h, t)
  
  /**
   * If the rhs only consists of a sequence, just make it an array (removes redundant parenthesis)
   */
  post-process-terminal-rule:
    Rhs([Sequence(head, tail)]) -> Rhs([head | tail])
  
  /**
   * In the post-processing, remove redundant parentheticals
   */
  post-process-terminal-rule:
    Parenthetical(Parenthetical(x)) -> Parenthetical(x)
	
	gen-terminal-alternative:
		TerminalGroup(terminal-group) -> gen-terminal-group
		where
			gen-terminal-group := <map(gen-terminal-group) ; list-to-sequence> terminal-group
	
	list-to-sequence:
		[singleton] -> singleton
	
	list-to-sequence:
		[h|t] -> Sequence(h, t)
	
	gen-terminal-group:
		TerminalToken(terminal-token-element, cardinality-opt) -> <gen-cardinality(|<gen-terminal-token-element> terminal-token-element)> cardinality-opt
	
	gen-terminal-token-element:
		TerminalAlternatives(terminal-alternatives) -> Parenthetical(<map(gen-terminal-alternative) ; list-to-alt> terminal-alternatives)
	
	// Turn [a, b, c, ...] into Alt(a, Alt(b, Alt(c, ...)))
	list-to-alt:
		[singleton] -> singleton
	
	list-to-alt:
		[head | tail] -> Alt(head, <list-to-alt> tail)

  /**
   * Turn special keywords into character classes, or normal keywords into CiLits
   */
  gen-terminal-token-element:
    Keyword(s) -> <gen-terminal-token-element-special + gen-terminal-token-element-normal>
  
  gen-terminal-token-element:
  	UntilToken(Keyword(s)) -> Sequence(CharClass(Comp(Simple(Absent()))),[CiLit(s)])
  	where
  		<debug> "WARNING: UntilToken isn't correctly converted"
  
  gen-terminal-token-element-special:
    Keyword(char) -> CharClass(Simple(Present(Short(<unquote(id)> char))))
  where
    <gen-terminal-token-is-special> char
  
  gen-terminal-token-is-special:
    char -> <true>
  where
    ?"'\\r'"
  + ?"'\\n'"
  + ?"'\\t'"
	
  gen-terminal-token-element-normal:
     Keyword(s) -> CiLit(s)
  
  /**
   * Turn CharacterRange into CharClass
   */
	gen-terminal-token-element:
		CharacterRange(Keyword(from), Keyword(to)) -> CharClass(
			Simple(
				Present(
					Range(
						Short(<unquote(id)> from),
						Short(<unquote(id)> to)
				  )
				)
		  )
		)
	
	/**
	 * Turn RuleCall into Sort
	 */
	gen-terminal-token-element:
		RuleCall(name) -> Sort(<sort-name> name)
		
  /**
   * Negated terms 
   */
  gen-terminal-token-element:
    NegatedToken(token) -> CharClass(
      Comp(
        Simple(
          Present(<gen-terminal-token-element-neg> token)
        )
      )
    )
  
  gen-terminal-token-element-neg:
    Keyword(s) -> Short(<unquote(id) ; try(escape-short)> s)
  
  escape-short:
  	"*" -> "\\*"
  
  gen-terminal-token-element-neg:
    TerminalAlternatives(groups) -> result
  where
    result := <map(gen-terminal-token-neg-rule); list-to-conc> groups
  
  gen-terminal-token-neg-rule:
    TerminalGroup([TerminalToken(Keyword(s), None())]) -> <gen-terminal-token-element-neg> Keyword(s)
	
	/**
	 * Turn Wildcard into the complement of an empty CharClass
	 */
	gen-terminal-token-element:
		Wildcard(_) -> CharClass(Comp(Simple(Absent())))