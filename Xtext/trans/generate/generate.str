module generate

imports
	
	libstratego-gpp
	sdf/src-gen/pp/TemplateLang-pp
	sdf/src-gen/pp/modules/Modules-pp
	lib/editor-common.generated
	include/Xtext
	include/TemplateLang
	generate/common
	generate/parser-rule
	generate/post
  generate/parser-rule
  generate/terminal-rule
	generate/xtext-expand-optional
	generate/xtext-expand-alternative
	generate/xtext-lift-alternative
	generate/xtext-obtain-priorities
	generate/add-actions
	generate/sdf-priority-groups
	
rules // Printing SDF
  
  sdf-pp = (prettyprint-sdf-Module + prettyprint-sdf-Grammar + prettyprint-Section); !V([], <id>); box2text-string(|120)
  
rules // Generating SDF
	
	// "Generate SDF"
	menu-gen-sdf-file:
		(selected, position, ast, path, project-path) -> (filename, <sdf-pp> sdf)
		where
			filename := <guarantee-extension(|"sdf3")> path
		; sdf      := <gen-sdf-debug> selected
	
	// "Generate SDF (ATerm)"
	menu-gen-sdf:
		(selected, position, ast, path, project-path) -> (filename, <gen-sdf-debug> selected)
		where
			filename := <guarantee-extension(|"sdf3.aterm")> path
	
	gen-sdf-debug:
	  (ast, priorities) -> cleaned-up-priorities
	where
	  sdf                   := <gen-sdf-debug> ast
	; sdf-with-priorities   := <add-priorities> (sdf, priorities)
	; priorities-with-assoc := <innermost(priority-group(|sdf-with-priorities))> sdf-with-priorities
	; cleaned-up-priorities := <innermost(cleanup_priorities)> priorities-with-assoc
	  
	add-priorities:
	  (Module(x, y, sections), priorities) -> Module(x, y, <append> (sections, priorities))
	
	gen-sdf-debug:
		ast -> <(gen-grammar(|ast) + gen-rule(|ast)); topdown(try(post))> ast
	
	// "Generate Xtext > SDF > Nolabel"
	menu-gen-xtext-sdf-nolabel:
	  (selected, position, ast, path, project-path) -> (filename, result)
	where
    dirname  := <dirname> path
  ; filename := <guarantee-extension(|"sdf3")> path
  ; result   := <gen-xtext-sdf(|dirname); topdown(try(?Label(_, <id>))); sdf-pp> selected
  
	// "Generate Xtext > SDF
	menu-gen-xtext-sdf:
		(selected, position, ast, path, project-path) -> (filename, result)
	where
    dirname  := <dirname> path
  ; filename := <guarantee-extension(|"sdf3")> path
  ; result   := <gen-xtext-sdf(|dirname); sdf-pp> selected
  
	gen-xtext-sdf(|dirname):
	  ast -> sdf
	where
    xtext    := <gen-xtext> ast
  ; sdf      := <gen-sdf-debug> xtext
	; <mixin-get; map(mixin-generate(|dirname))> ast
	
	mixin-get:
		ast -> <collect-one(?Grammar(_, Some(Mixin(<id>)), _, _, _)) + ![]>

  mixin-generate(|dir):
    mixin -> <true>
  where
  	name   := <mixin-get-name> mixin
  ; source := <mixin-read-xtext(|dir)> name
  ; xtext  := <parse-xtext-string> source
  ; sdf    := <gen-xtext-sdf(|dir) ; sdf-pp> xtext
  ; <mixin-write-sdf(|dir, name)> sdf
  
	mixin-get-name:
		GrammarID(ids) -> <last> ids
	
	mixin-read-xtext(|dir):
	  name -> result
	where
	  filename := <guarantee-extension(|"xtext")> name
	; path     := <concat-strings> [dir, "/", filename]
	; result   := <read-text-file> path
	
  mixin-write-sdf(|dir, name):
    content -> <write-text-file> (path, content)
  where
    filename := <guarantee-extension(|"sdf3")> name
  ; path     := <concat-strings> [dir, "/", filename]
  ; <refresh-workspace-file> path

rules // Generating intermediate Xtext
  
	// "Generate Xtext"
	menu-gen-xtext:
		(selected, _, _, path, _) -> (filename, <gen-xtext> selected)
		where
			filename := <guarantee-extension(|"xtextng.aterm")> path
	
	/**
	 * Desugar selection.
	 * - Do a flatten-list over the whole tree afterwards to prevent nested parser rules directly in a Grammar()
	 * - Do a add-action over the whole tree afterwards to add actions where necessary
	 * - Extract priorities from Xtext and return a pair (xtext grammar, sdf priorities)
	 *
	 * @type Xtext AST -> (modified Xtext AST, priority tuples)
	 */
	gen-xtext:
		ast -> xtext-with-priorities
	  where
	    desugared             := <desugar ; topdown(try(flatten-list))> ast
	  ; actions               := <topdown(try(add-action))> desugared
	  ; xtext-with-priorities := <obtain-priorities> actions
	
	// Expand optionals, then recursively desugar those expanded optionals, and finally flatten the result
	desugar = topdown(try(expand ; desugar ; try(flatten-list)))

