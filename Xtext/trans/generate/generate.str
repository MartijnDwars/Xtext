module generate

imports
	
	libstratego-gpp
	sdf/src-gen/pp/TemplateLang-pp
	sdf/src-gen/pp/modules/Modules-pp
	generate/parser-rule
	include/Xtext
	generate/post
	generate/xtext-expand-optional
	generate/xtext-expand-alternative
	generate/xtext-lift-alternative
	generate/add-actions
	
rules
	
	sdf-pp = (prettyprint-sdf-Module + prettyprint-sdf-Grammar + prettyprint-Section); !V([], <id>); box2text-string(|120)
	
	gen-sdf-file:
		(selected, position, ast, path, project-path) -> (filename, <sdf-pp> <gen-sdf-debug> selected)
		where
			filename := $[[<remove-extension> path].sdf3]
	
	gen-sdf:
		(selected, position, ast, path, project-path) -> (filename, <gen-sdf-debug> selected)
		where
			filename := $[[<remove-extension> path].sdf3.aterm]
	
	gen-sdf-debug:
		selected -> <(gen-grammar + gen-rule) ; try(post)> selected
	
	gen-sdf-debug:
		selected -> <map(gen-sdf-debug)> selected
		where
			<is-list> selected
	
	// Menu
	gen-xtext-sdf:
		(selected, position, ast, path, project-path) -> (filename, <gen-xtext ; gen-sdf-debug ; sdf-pp> selected)
		where
			filename := $[[<remove-extension> path].sdf3]
	
	// Menu
	gen-xtext:
		(selected, _, _, path, _) -> (filename, <gen-xtext> selected)
		where
			filename := <guarantee-extension(|"xtextng.aterm")> path
	
	// Desugar selection.
	// - Do a flatten-list over the whole tree afterwards to prevent nested parser rules directly in a Grammar()
	// - Do a add-action over the whole tree afterwards to add actions where necessary
	gen-xtext:
		ast -> <desugar ; topdown(try(flatten-list)) ; topdown(try(add-action))> ast
	
	// Expand optionals, then recursively desugar those expanded optionals, and finally flatten the result
	desugar = topdown(try(expand ; desugar ; try(flatten-list)))

