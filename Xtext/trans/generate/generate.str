module generate

imports
	
	include/Xtext
	generate/terminals

rules 

	gen-sdf:
		(selected, position, ast, path, project-path) -> (filename, <gen-sdf-debug> selected)
		where
			filename := $[[<remove-extension> path].sdf3]
	
	gen-sdf-debug:
		selected -> <gen-grammar + gen-parser-rule + gen-alternatives + gen-abstract-token> selected
	
	gen-grammar:
		Grammar(GrammarID(names), _, _, _, _) -> $[module [name]]
		where
			name := <id-to-name> names
	
	gen-parser-rule:
		ParserRule(name, _, _, alternatives) -> $[[name] = [<gen-alternatives> alternatives]]
	
	gen-alternatives:
		Alternatives([UnorderedGroup([Group(abstract-tokens)])]) -> $[<[<map(gen-abstract-token) ; separate-by(|" ")> abstract-tokens]>]
	
	gen-abstract-token:
		AssignmentAbstractToken(_, feature, type, assignable-terminal, cardinality-opt) -> <gen-assignable-terminal> assignable-terminal
	
	gen-abstract-token:
		AbstractTerminalAbstractToken(abstract-terminal, cardinality-opt) -> $[[gen-abstract-terminal] [gen-cardinality]]
		with
			gen-abstract-terminal := <gen-abstract-terminal> abstract-terminal;
			gen-cardinality       := <gen-cardinality-opt> cardinality-opt
	
	gen-abstract-token:
		ActionAbstractToken(_) -> $[]
	
	gen-abstract-terminal:
		Keyword(ID) -> $[[ID]]
		
	gen-abstract-terminal:
		RuleCall(ID) -> $[[ID]]

	gen-abstract-terminal:
		x@Alternatives(_) -> <gen-alternatives> x
	
	gen-assignable-terminal:
		RuleCall(ID) -> $[<[ID]>]