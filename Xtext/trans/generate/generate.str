module generate

imports
	
	libstratego-gpp
	sdf/src-gen/pp/TemplateLang-pp
	sdf/src-gen/pp/modules/Modules-pp
	generate/parser-rule
	include/Xtext
	include/TemplateLang
	generate/common
	generate/post
	generate/xtext-expand-optional
	generate/xtext-expand-alternative
	generate/xtext-lift-alternative
	generate/xtext-obtain-priorities
	generate/add-actions
	generate/sdf-priority-groups
	
rules
	
	sdf-pp = (prettyprint-sdf-Module + prettyprint-sdf-Grammar + prettyprint-Section); !V([], <id>); box2text-string(|120)
	
	gen-sdf-file:
		(selected, position, ast, path, project-path) -> (filename, <sdf-pp> <gen-sdf-debug> selected)
		where
			filename := $[[<remove-extension> path].sdf3]
	
	gen-sdf:
		(selected, position, ast, path, project-path) -> (filename, <gen-sdf-debug> selected)
		where
			filename := $[[<remove-extension> path].sdf3.aterm]
	
	gen-sdf-debug:
	  (ast, priorities) -> cleaned-up-priorities
	where
	  sdf                   := <gen-sdf-debug> ast
	; sdf-with-priorities   := <add-priorities> (sdf, priorities)
	; priorities-with-assoc := <innermost(priority-group(|sdf-with-priorities))> sdf-with-priorities
	; cleaned-up-priorities := <innermost(cleanup_priorities)> priorities-with-assoc
	  
	add-priorities:
	  (Module(x, y, sections), priorities) -> Module(x, y, <append> (sections, priorities))
	
	gen-sdf-debug:
		selected -> <(gen-grammar + gen-rule) ; topdown(try(post))> selected 
	
	// Menu
	gen-xtext-sdf-nolabel:
	  (selected, position, ast, path, project-path) -> (filename, result)
	where
    filename := <guarantee-extension(|"sdf3")> path
  ; result   := <gen-xtext-sdf; topdown(try(?Label(_, <id>))); sdf-pp> selected
  
	// Menu
	gen-xtext-sdf:
		(selected, position, ast, path, project-path) -> (filename, result)
	where
    filename := <guarantee-extension(|"sdf3")> path
  ; result   := <gen-xtext-sdf; sdf-pp> selected
	
	gen-xtext-sdf:
	  ast -> sdf
	where
    xtext    := <gen-xtext> ast
  ; sdf      := <gen-sdf-debug> xtext
  
	// Menu
	gen-xtext:
		(selected, _, _, path, _) -> (filename, <gen-xtext> selected)
		where
			filename := <guarantee-extension(|"xtextng.aterm")> path
	
	/**
	 * Desugar selection.
	 * - Do a flatten-list over the whole tree afterwards to prevent nested parser rules directly in a Grammar()
	 * - Do a add-action over the whole tree afterwards to add actions where necessary
	 * - Extract priorities from Xtext and return a pair (xtext grammar, sdf priorities)
	 *
	 * @type Xtext AST -> (modified Xtext AST, priority tuples)
	 */
	gen-xtext:
		ast -> xtext-with-priorities
	  where
	    desugared             := <desugar ; topdown(try(flatten-list))> ast
	  ; actions               := <topdown(try(add-action))> desugared
	  ; xtext-with-priorities := <obtain-priorities> actions
	
	// Expand optionals, then recursively desugar those expanded optionals, and finally flatten the result
	desugar = topdown(try(expand ; desugar ; try(flatten-list)))

