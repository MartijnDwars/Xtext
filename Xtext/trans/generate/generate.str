module generate

imports
	
	libstratego-gpp
	sdf/src-gen/pp/TemplateLang-pp
	sdf/src-gen/pp/modules/Modules-pp
	generate/parser-rule
	include/Xtext
	generate/post
	
rules
	
	sdf-pp = (prettyprint-sdf-Module + prettyprint-sdf-Grammar + prettyprint-Section); !V([], <id>); box2text-string(|120)
	
	gen-sdf-file:
		(selected, position, ast, path, project-path) -> (filename, <sdf-pp> <gen-sdf-debug> selected)
		where
			filename := $[[<remove-extension> path].sdf3]
	
	gen-sdf:
		(selected, position, ast, path, project-path) -> (filename, <gen-sdf-debug> selected)
		where
			filename := $[[<remove-extension> path].sdf3.aterm]
	
	gen-sdf-debug:
		selected -> <(gen-grammar + gen-rule) ; post> selected
	
	gen-sdf-debug:
		selected -> <map(gen-sdf-debug)> selected
		where
			<is-list> selected
	
	gen-xtext:
		(selected, position, ast, path, project-path) -> (filename, <gen-xtext> selected)
		where
			filename := $[[<remove-extension> path].xtextng]
	
	gen-xtext:
		p@ParserRule(_, _, _, alternatives) -> <map(insert(|p))> unordered-groups
		where
			unordered-groups := <collect-one(is-double-alt)> alternatives
	
	// gen-xtext:
	// 	AbstractTerminalAbstractToken(token, Some(Any())) -> y
	// 	where
	// 		y :=
		
	insert(|p):
		u@UnorderedGroup(_) -> <oncetd(replace(|u))> p
	
	replace(|u):
		Alternatives(unordered-groups) -> Alternatives(u)
		where
			<gt> (<length> unordered-groups, 1)
	
	is-double-alt:
		Alternatives(unordered-groups) -> unordered-groups
		where
			<gt> (<length> unordered-groups, 1)
		





