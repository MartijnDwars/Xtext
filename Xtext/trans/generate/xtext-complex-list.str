module xtext-complex-list

imports
	
	include/Xtext
	include/TemplateLang
	generate/parser-rule
  
rules
	
	replace-complex-list:
		input -> <try(find-consecutive-elements(find-list-initiator, find-list-tail))> input
	
	find-consecutive-elements(filter1, filter2):
		[head | [head_tail | tail]] -> <flatten-list> out
	where
		<not(equal([]))> head_tail;
		out := <if(a := <filter1> head, 
					if(b := <filter2> (head_tail, a),
							<id> [b | tail], 
							<id> [head | <try(find-consecutive-elements(filter1, filter2))> [head_tail | tail]]
					),
					<id> [head | <try(find-consecutive-elements(filter1, filter2))> [head_tail | tail]]
				)>
	
	// First
  find-list-initiator:
    AssignmentAbstractToken(_, a, _, b, None()) -> (a, b)
	
	find-list-tail:
		(AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ AbstractTerminalAbstractToken(sep, None())
                              , AssignmentAbstractToken(None(), a, _, b, None())
                              ])
                          ])
                      ])
                  , Some(Any())
                  ),
		(a, b)) -> (IterSep(Label(Quoted(<double-quote> a), object), separator), [])
	where
	  separator := <gen-assignable-terminal> sep
	; object    := <gen-assignable-terminal> b 

  // Second
  find-list-initiator:
    AbstractTerminalAbstractToken(token, None()) -> ("", token)
  where
    <not(?Alternatives(_))> token
  
  find-list-tail:
    (AbstractTerminalAbstractToken(
                    Alternatives(
                      [ UnorderedGroup(
                          [ Group(
                              [ ActionAbstractToken(_)
                              , AbstractTerminalAbstractToken(sep, None())
                              , AssignmentAbstractToken(None(), _, _, b, None())
                              ])
                          ])
                      ])
                  , Some(Any())
                  ),
    (_, b)) -> (IterSep(object, separator), [])
  where
    separator := <gen-assignable-terminal> sep
  ; object    := <gen-assignable-terminal> b
