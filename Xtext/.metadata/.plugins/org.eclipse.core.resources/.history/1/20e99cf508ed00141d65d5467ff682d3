module ParserRule

language Xtext
start symbol AbstractRule

test rule without alternatives [[
  AbstractToken :
  ;
]] parse fails

test rule with single alternative [[
  AbstractToken :
    TokenA
  ;
]] parse succeeds

test terminal [[
  AbstractToken :
    "abc"
  ;
]] parse succeeds

test terminal with cardinality [[
  AbstractToken :
    "abc"+
  ;
]] parse succeeds

test assignment [[
  AbstractToken :
    name = "abc"
  ;
]] parse succeeds

test assignment with cardinality [[
  AbstractToken :
    name = "abc"+
  ;
]] parse succeeds

test assignment with parentheses [[
  AbstractToken :
    name = ("abc" | "def")
  ;
]] parse succeeds

test action [[
  AbstractToken :
    name = ("abc" | "def")
  ;
]] parse succeeds

test rule with multiple alternative [[
  AbstractToken :
    TokenA |
    TokenB |
    TokenC
  ;
]] parse succeeds

test greeting [[
  Greeting:
    'Hello' name=ID '!';
]] parse succeeds

test unordered group [[
  Modifier: 
    static?='static'? & final?='final'? & visibility=Visibility;
]] parse succeeds



// --- The ParserRule's below are all parts of the "15 Minutes Tutorial" on Xtext

test Example 1 [[
	Domainmodel:
	  (elements += AbstractElement)*
	;
]] parse succeeds

test Example 2 [[
	Type:
	  DataType | Entity
	;
]] parse succeeds

test Example 3 [[
	DataType:
	  'datatype' name = ID
	;
]] parse succeeds

test Example 4 [[
	Entity:
	  'entity' name = ID ('extends' superType = [Entity])? '{'
	     (features += Feature)*
	  '}'
	;
]] parse succeeds

test Example 5 [[
	Feature:
	  (many ?= 'many')? name = ID ':' type = [Type]
	;
]] parse succeeds